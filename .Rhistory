longitude = result$lon
))
} else {
return(NULL)
}
# Apply the function to your dataframe
standardized_data <- distinct_hometowns %>%
rowwise() %>%
do(get_coordinates(.$hometown_city, .$hometown_state_clean))
#Google Maps API key
register_google(key = "AIzaSyCG_P-uNr-OK8Gufsj25aBSHSQsM88DhP8")
query <- paste(city, state, "USA", sep = ", ")
#Idk what this is but let's try it
# Define a function to retrieve coordinates
get_coordinates <- function(city, state) {
query <- paste(city, state, "USA", sep = ", ")
result <- geocode(query)
if (!is.na(result$lon) && !is.na(result$lat)) {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = result$location_type, # You can choose which field to use here
latitude = result$lat,
longitude = result$lon
))
} else {
return(NULL)
}
# Apply the function to your dataframe
standardized_data <- distinct_hometowns %>%
rowwise() %>%
do(get_coordinates(.$hometown_city, .$hometown_state_clean))
# Load Census API key
Sys.setenv(CENSUS_API_KEY = "AIzaSyBOA7yohU4JvowWzuo83RTfU6G510W8vNk", overwrite = TRUE)
#Google Maps API key
register_google(key = "AIzaSyBOA7yohU4JvowWzuo83RTfU6G510W8vNk")
#Maybe the first step is to create a dataframe of the distinct hometown and state values
distinct_hometowns <- football_rosters_usa %>%
group_by(hometown_city, hometown_state_clean) %>%
summarise(total = n()) %>%
arrange(hometown_city)
#Idk what this is but let's try it
# Define a function to retrieve coordinates
get_coordinates <- function(city, state) {
query <- paste(city, state, "USA", sep = ", ")
result <- geocode(query)
if (!is.na(result$lon) && !is.na(result$lat)) {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = result$city,
latitude = result$lat,
longitude = result$lon
))
} else {
return(NULL)
}
# Apply the function to your dataframe
standardized_data <- distinct_hometowns %>%
rowwise() %>%
do(get_coordinates(.$hometown_city, .$hometown_state_clean))
#Idk what this is but let's try it
# Define a function to retrieve coordinates
get_coordinates <- function(city, state) {
query <- paste(city, state, "USA", sep = ", ")
result <- geocode(query)
if (length(result$lon) > 0 && length(result$lat) > 0) {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = result$location_type[1], # You can choose which field to use here
latitude = result$lat[1],
longitude = result$lon[1]
))
} else {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = NA,
latitude = NA,
longitude = NA
))
}
# Apply the function to your dataframe
standardized_data <- distinct_hometowns %>%
rowwise() %>%
do(get_coordinates(.$hometown_city, .$hometown_state_clean))
#Idk what this is but let's try it
# Define a function to retrieve coordinates
get_coordinates <- function(city, state) {
query <- paste(city, state, "USA", sep = ", ")
result <- geocode(query)
if (length(result$lon) > 0 && length(result$lat) > 0) {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = result$location_type[1],
latitude = result$lat[1],
longitude = result$lon[1]
))
} else {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = NA,
latitude = NA,
longitude = NA
))
}
# Apply the function to your dataframe
standardized_data <- distinct_hometowns %>%
rowwise() %>%
do(get_coordinates(.$hometown_city, .$hometown_state_clean))
#Idk what this is but let's try it
# Define a function to retrieve coordinates
get_coordinates <- function(city, state) {
query <- paste(city, state, "USA", sep = ", ")
result <- geocode(query)
if (length(result$lon) > 0 && length(result$lat) > 0) {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = ifelse(length(result$location_type) > 0, result$location_type[1], NA),
latitude = result$lat[1],
longitude = result$lon[1]
))
} else {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = NA,
latitude = NA,
longitude = NA
))
}
# Apply the function to your dataframe
standardized_data <- distinct_hometowns %>%
rowwise() %>%
do(get_coordinates(.$hometown_city, .$hometown_state_clean))
View(standardized_data)
#Idk what this is but let's try it
# Define a function to retrieve coordinates
get_coordinates <- function(city, state) {
query <- paste(city, state, "USA", sep = ", ")
result <- geocode(query)
if (length(result$lon) > 0 && length(result$lat) > 0) {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = ifelse(length(result$location_type) > 0, result$location_type[1], NA),
latitude = result$lat[1],
longitude = result$lon[1]
))
} else {
return(data.frame(
original_city = city,
original_state = state,
standardized_city = "Not Found",
latitude = NA,
longitude = NA
))
}
# Apply the function to your dataframe
standardized_data <- distinct_hometowns %>%
rowwise() %>%
do(get_coordinates(.$hometown_city, .$hometown_state_clean))
View(standardized_data)
#Idk what this is but let's try it
# Define a list of cities
cities <- c("Atlanta, GA", "Baltimore, MD", "Seattle, WA")
# Create an empty list to store the OSM data for each city
city_data <- list()
# Loop through the list of cities
for (city in cities) {
# Get OSM data for the city
osm_query <- opq(city) %>%
add_osm_feature(key = 'place', value = 'city') %>%
osmdata_sf()
# Store the data in the list
city_data[[city]] <- osm_query
}
#Idk what this is but let's try it
# Define a list of cities
cities <- c("Atlanta, GA", "Baltimore, MD", "Seattle, WA")
# Create an empty list to store the OSM data for each city
city_data <- list()
# Loop through the list of cities
for (city in cities) {
# Get OSM data for the city
osm_query <- opq(city) %>%
add_osm_feature(key = 'place', value = 'city') %>%
osmdata_sf()
# Store the data in the list
city_data[[city]] <- osm_query
}
# Standardize city names
standardized_cities <- names(city_data)
# Print the standardized city names
print(standardized_cities)
#Idk what this is but let's try it
# Define a list of cities
cities <- c("Atl., GA", "Balt., MD", "Seattle, WA")
# Create an empty list to store the OSM data for each city
city_data <- list()
# Loop through the list of cities
for (city in cities) {
# Get OSM data for the city
osm_query <- opq(city) %>%
add_osm_feature(key = 'place', value = 'city') %>%
osmdata_sf()
# Store the data in the list
city_data[[city]] <- osm_query
}
View(standardized_data)
View(distinct_hometowns)
install.packages("nominatim")
library(nominatim)
library(ggmap)
#Google Maps API key
register_google(key = "AIzaSyBOA7yohU4JvowWzuo83RTfU6G510W8vNk")
View(standardized_data)
#Idk what this is but let's try it
# Define a list of cities
cities <- c("Atl., GA", "Atlanta, GA", "Balt., MD", "Baltimore, MD", "Seattle, WA")
api_key <- "AIzaSyBOA7yohU4JvowWzuo83RTfU6G510W8vNk"
# Define a function to get standardized city names
get_standardized_city <- function(city, api_key) {
geo_data <- geocode(city, source = "google", output = "more", key = api_key)
if (nrow(geo_data) > 0) {
return(paste(geo_data$locality, geo_data$administrative_area_level_1, sep = ", "))
} else {
return(NA)
}
# Get standardized city names
standardized_cities <- lapply(cities, get_standardized_city, api_key = api_key)
city_data <- data.frame(
OriginalCityState = cities,
StandardizedCityState = unlist(standardized_cities)
)
R.version
devtools::install_github("hrbrmstr/nominatim")
cancel
devtools::install_github("hrbrmstr/nominatim")
#install.packages("nominatim")
library(nominatim)
#Idk what this is but let's try it
# Define the geocode_city_state function
geocode_city_state <- function(city, state) {
result <- nominatim_geocode(paste(city, state, sep = ", "))
if (!is.null(result)) {
standardized_city <- result$address$city
standardized_state <- result$address$state
return(c(city, state, standardized_city, standardized_state))
} else {
return(NA)
}
# Apply the function to the data
standardized_data <- apply(distinct_hometowns, 1, function(row) geocode_city_state(row["hometown_city"], row["hometown_state_cleaned"]))
#Idk what this is but let's try it
# Define the geocode_city_state function
geocode_city_state <- function(city, state) {
result <- nominatim_search(paste(city, state, sep = ", "))
if (!is.null(result)) {
standardized_city <- result$address$city
standardized_state <- result$address$state
return(c(city, state, standardized_city, standardized_state))
} else {
return(NA)
}
# Apply the function to the data
standardized_data <- apply(distinct_hometowns, 1, function(row) geocode_city_state(row["hometown_city"], row["hometown_state_cleaned"]))
#Idk what this is but let's try it
# Define the geocode_city_state function
geocode_city_state <- function(city, state) {
result <- osm_search(paste(city, state, sep = ", "))
if (!is.null(result)) {
standardized_city <- result$address$city
standardized_state <- result$address$state
return(c(city, state, standardized_city, standardized_state))
} else {
return(NA)
}
# Apply the function to the data
standardized_data <- apply(distinct_hometowns, 1, function(row) geocode_city_state(row["hometown_city"], row["hometown_state_cleaned"]))
#Idk what this is but let's try it
addrs <- osm_geocode(c("1600 Pennsylvania Ave, Washington, DC.",
"1600 Amphitheatre Parkway, Mountain View, CA",
"Seattle, Washington"))
CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj
#Idk what this is but let's try it
addrs <- osm_geocode(c("1600 Pennsylvania Ave, Washington, DC.",
"1600 Amphitheatre Parkway, Mountain View, CA",
"Seattle, Washington"))
CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj
#Mapquest API key
mapquest_key <- CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj
#Mapquest API key
mapquest_key <- "CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj"
#Idk what this is but let's try it
addrs <- osm_geocode(c("1600 Pennsylvania Ave, Washington, DC.",
"1600 Amphitheatre Parkway, Mountain View, CA",
"Seattle, Washington"))
mapquest_key
#Idk what this is but let's try it
test <- osm_geocode("Abbeville, SC")
CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj
#Idk what this is but let's try it
test <- osm_geocode("Abbeville, SC")
"CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj"
#Idk what this is but let's try it
test <- osm_geocode("Abbeville, SC")
"CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj"
1
#Idk what this is but let's try it
test <- osm_geocode("Abbeville, SC", key = "CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj")
View(test)
test %>% select(display_name)
addrs <- osm_geocode(c("1600 Pennsylvania Ave, Washington, DC.",
"1600 Amphitheatre Parkway, Mountain View, CA",
"Seattle, Washington", key = "CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj"))
#Idk what this is but let's try it
test <- osm_geocode("Abbeville, SC", key = "CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj")
test %>% select(display_name)
#Idk what this is but let's try it
test <- osm_geocode("Arlington, VA", key = "CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj")
#Idk what this is but let's try it
test <- osm_search("Arlington, VA", key = "CvEjNMkELJJ8b8ZRrX7rcK5nTUpdZeuj")
library(ggmap)
#Maybe the first step is to create a dataframe of the distinct hometown and state values
distinct_hometowns <- football_rosters_usa %>%
group_by(hometown_city, hometown_state_clean) %>%
summarise(total = n()) %>%
arrange((hometown_city))
#libraries
library(tidyverse)
library(googlesheets4)
library(janitor)
library(tidycensus)
#library(lubridate)
#install.packages("googlesheets4")
#install.packages("ipumsr")
#library(ipumsr)
#Authenticating with Google account
#gs4_auth()
# Load Census API key
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
#libraries
library(tidyverse)
library(googlesheets4)
library(janitor)
library(tidycensus)
#library(lubridate)
#install.packages("googlesheets4")
#install.packages("ipumsr")
#library(ipumsr)
#Authenticating with Google account
#gs4_auth()
# Load Census API key
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
#Load Aspen Institute participation rate data
age_6_12 <- read_sheet("https://docs.google.com/spreadsheets/d/1AvA8phsRgDh9AXj0sMeH1zZQtjJP9JD-8A2AH9YrBzY/edit#gid=0", sheet = "Ages 6-12")
age_13_17 <- read_sheet("https://docs.google.com/spreadsheets/d/1AvA8phsRgDh9AXj0sMeH1zZQtjJP9JD-8A2AH9YrBzY/edit#gid=0", sheet = "Ages 13-17")
#Load football roster scraper. Also did some cleaning for special cases here. For the players who were missing hometown information, this was obtained by looking at rosters from previous years.
football_rosters <- read_csv("football_roster.csv") %>%
clean_names() %>%
mutate(hometown = case_when(
hometown == "Pompano, Beach, Fla." ~ "Pompano Beach, Fla.",
hometown == "Livemore Calif." ~ "Livemore, Calif.",
hometown == "Washington D.C." ~ "Washington, D.C.",
hometown == "Tampa. Fla." ~ "Tampa, Fla.",
hometown == "Upper Marlboro. Md." ~ "Upper Marlboro, Md.",
hometown == "Norfolk,Va." ~ "Norfolk, Va.",
hometown == "Bronx N.Y." ~ "Bronx, N.Y.",
hometown == "Cocoa Fla." ~ "Cocoa, Fla.",
hometown == "Jefferson" ~ "Jefferson Township, NJ",
hometown == "Melbourne" ~ "Melbourne, FL",
hometown == "Chicago" ~ "Chicago, IL",
hometown == "Cincinnati" ~ "Cincinnati, OH",
hometown == "Cleveland" ~ "Cleveland, OH",
hometown == "St. Louis" ~ "St. Louis, MO",
hometown == "Inglewood" ~ "Inglewood, CA",
TRUE ~ hometown)) %>%
mutate(hometown = case_when(
name == "Feyisayo Oluleye" ~ "Lancaster, PA",
name == "Kyle Vaccarella" ~ "Fairfield, CT",
TRUE ~ hometown))
#Let's also use this as a time to load a state crosswalk we'll use later
state_crosswalk <- read_csv("state_crosswalk.csv") %>%
mutate(state_name_caps = str_to_upper(state_name)) %>%
select(state_abb, state_name_caps)
#Checking to see that we have 68 schools and the player counts for each school
school_check <- football_rosters %>%
group_by(school) %>%
summarise(total_players = n()) %>%
arrange(total_players)
#Checking to make sure there are no duplicate players
player_check <- football_rosters %>%
group_by(name, school) %>%
summarise(total = n()) %>%
arrange(desc(total))
#CLEANING/STANDARDIZING STATE
#Splitting the hometown column so we can work with the state
football_rosters <- football_rosters %>%
mutate(hometown_cleaning = hometown) %>%
separate(hometown_cleaning, into = c("hometown_city", "hometown_state", "hometown_country"), sep = ", ")
#What kind of values are we getting in hometown_state?
state_check <- football_rosters %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Many of those aren't U.S. states. Let's make a new dataframe that only has players from the 50 states:
excluded_states <- c(" Western Australia", "Alberta", "American Samoa", "Australia", "Bahamas", "Belgium", "Canada", "China", "Colombia", "Congo", "County Kerry", "Denmark", "DR of the Congo", "England", "Finland", "France", "Gabon", "Germany", "Ghana", "Ireland", "Japan", "Manitoba", "Mexico", "N.S.", "New South Wales", "New Zealand", "Nigeria", "NSW", "Ont.", "Ontario", "QC", "Que.", "Quebec", "Québec", "Queensland", "Saskatchewan", "Serbia", "South Africa", "South Australia", "Sweden", "Switzerland", "The Netherlands", "Tonga", "United Kingdom", "Victoria", "Victoria AU", "Western Samoa")
football_rosters_usa <- football_rosters %>%
filter(!(hometown_state %in% excluded_states) | is.na(hometown_state)) %>%
mutate(hometown_state = case_when(
hometown_state == "Maui" ~ "HI",
hometown_state == "New York City" ~ "NY",
TRUE ~ hometown_state))
#And now let's recheck those hometown_state values:
state_check_usa <- football_rosters_usa %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Let's standardize these suckers to the state postal abbreviation:
#First, let's try removing punctuation and making everything upper case:
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_first_try = str_to_upper(gsub("[[:punct:]]", "", hometown_state)))
#Second, let's see if we can use our crosswalk:
football_rosters_usa <- football_rosters_usa %>%
left_join(state_crosswalk, by=c("hometown_state_first_try" = "state_name_caps"))
football_rosters_usa <- football_rosters_usa %>%
rename(hometown_state_second_try = state_abb)
#Third, let's combine the results of our first two tries and check to see how much that reduced our unique values
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_third_try = ifelse(is.na(hometown_state_second_try), hometown_state_first_try, hometown_state_second_try))
state_check_usa_update <- football_rosters_usa %>%
group_by(hometown_state_third_try) %>%
summarise(total = n()) %>%
arrange(hometown_state_third_try)
#Cool! Now we're down to much fewer state values. Let's manually take care of the rest. How long could that take, right?
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_clean = case_when(
hometown_state_third_try == "ALA" ~ "AL",
hometown_state_third_try == "ARIZ" ~ "AZ",
hometown_state_third_try == "ARK" ~ "AR",
hometown_state_third_try == "CALF" | hometown_state_third_try == "CALIF" ~ "CA",
hometown_state_third_try == "COL" | hometown_state_third_try == "COLO" ~ "CO",
hometown_state_third_try == "CONN" ~ "CT",
hometown_state_third_try == "DEL" ~ "DE",
hometown_state_third_try == "FLA" ~ "FL",
hometown_state_third_try == "ILL" ~ "IL",
hometown_state_third_try == "IND" ~ "IN",
hometown_state_third_try == "KAN" ~ "KS",
hometown_state_third_try == "MASS" ~ "MA",
hometown_state_third_try == "MICH" ~ "MI",
hometown_state_third_try == "MINN" ~ "MN",
hometown_state_third_try == "MISS" ~ "MS",
hometown_state_third_try == "MONT" ~ "MT",
hometown_state_third_try == "NEB" ~ "NE",
hometown_state_third_try == "NEV" ~ "NV",
hometown_state_third_try == "OKLA" ~ "OK",
hometown_state_third_try == "ORE" ~ "OR",
hometown_state_third_try == "PENN" ~ "PA",
hometown_state_third_try == "TENN" ~ "TN",
hometown_state_third_try == "W VA" | hometown_state_third_try == "WVA" ~ "WV",
hometown_state_third_try == "WASH" ~ "WA",
hometown_state_third_try == "WIS" | hometown_state_third_try == "WISC" ~ "WI",
hometown_state_third_try == "WYO" ~ "WY",
TRUE ~ hometown_state_third_try))
#Okay, so what's the final state breakdown?
football_rosters_usa_states <- football_rosters_usa %>%
group_by(hometown_state_clean) %>%
summarise(total_players=n()) %>%
arrange(desc(total_players))
#STATES WITH POPULATION DATA
#Let's try to add in some population data and try to figure out the number of Power 5 football players per 100,000 residents in a state
#First, let's get ourselves a dataframe that has state postal abbreviations and their most recent ACS state population:
state_pops_2021 <- get_acs(geography = "state",
variables = "B01003_001",
year = 2021)
state_pops_2021 <- state_pops_2021 %>%
clean_names() %>%
mutate(name_caps = str_to_upper(name)) %>%
mutate(name_caps = case_when(
name_caps == "DISTRICT OF COLUMBIA" ~ "WASHINGTON, DC",
TRUE ~ name_caps
)) %>%
left_join(state_crosswalk, by=c("name_caps" = "state_name_caps"))
state_pops_2021 <- state_pops_2021 %>%
select(state_abb, estimate) %>%
filter(!is.na(state_abb)) #Removed NA value, which was Puerto Rico
# Now, let's join our population data to our state count of football players data:
football_rosters_usa_states <- football_rosters_usa_states %>%
inner_join(state_pops_2021, by=c("hometown_state_clean" = "state_abb"))
football_rosters_usa_states <- football_rosters_usa_states %>%
rename(total_pop = estimate)
football_rosters_usa_states <- football_rosters_usa_states %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/total_pop,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
write_csv(football_rosters_usa_states, file = "state_counts.csv")
# CLEANING/STANDARDIZING HOMETOWN
#Maybe the first step is to create a dataframe of the distinct hometown and state values
distinct_hometowns <- football_rosters_usa %>%
group_by(hometown_city, hometown_state_clean) %>%
summarise(total = n()) %>%
arrange((hometown_city))
View(distinct_hometowns)
# CSV
write_csv(distinct_hometowns, file = "hometowns_to_clean.csv")
View(football_rosters_usa_states)
View(football_rosters_usa)
