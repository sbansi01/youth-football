football_rosters_usa <- football_rosters %>%
filter(!(hometown_state %in% excluded_states) | is.na(hometown_state)) %>%
mutate(hometown_state = case_when(
hometown_state == "Maui" ~ "HI",
hometown_state == "New York City" ~ "NY",
TRUE ~ hometown_state))
#And now let's recheck those hometown_state values:
state_check_usa <- football_rosters_usa %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Let's standardize these to the state postal abbreviation:
#First, let's try removing punctuation and making everything upper case:
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_first_try = str_to_upper(gsub("[[:punct:]]", "", hometown_state)))
#Second, let's see if we can use our crosswalk:
football_rosters_usa <- football_rosters_usa %>%
left_join(state_crosswalk, by=c("hometown_state_first_try" = "state_name_caps"))
football_rosters_usa <- football_rosters_usa %>%
rename(hometown_state_second_try = state_abb)
#Third, let's combine the results of our first two tries and check to see how much that reduced our unique values
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_third_try = ifelse(is.na(hometown_state_second_try), hometown_state_first_try, hometown_state_second_try))
state_check_usa_update <- football_rosters_usa %>%
group_by(hometown_state_third_try) %>%
summarise(total = n()) %>%
arrange(hometown_state_third_try)
#Now we're down to much fewer state values. Let's manually take care of the rest.
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_clean = case_when(
hometown_state_third_try == "ALA" ~ "AL",
hometown_state_third_try == "ARIZ" ~ "AZ",
hometown_state_third_try == "ARK" ~ "AR",
hometown_state_third_try == "CALF" | hometown_state_third_try == "CALIF" ~ "CA",
hometown_state_third_try == "COL" | hometown_state_third_try == "COLO" ~ "CO",
hometown_state_third_try == "CONN" ~ "CT",
hometown_state_third_try == "DEL" ~ "DE",
hometown_state_third_try == "FLA" ~ "FL",
hometown_state_third_try == "ILL" ~ "IL",
hometown_state_third_try == "IND" ~ "IN",
hometown_state_third_try == "KAN" ~ "KS",
hometown_state_third_try == "MASS" ~ "MA",
hometown_state_third_try == "MICH" ~ "MI",
hometown_state_third_try == "MINN" ~ "MN",
hometown_state_third_try == "MISS" ~ "MS",
hometown_state_third_try == "MONT" ~ "MT",
hometown_state_third_try == "NEB" ~ "NE",
hometown_state_third_try == "NEV" ~ "NV",
hometown_state_third_try == "OKLA" ~ "OK",
hometown_state_third_try == "ORE" ~ "OR",
hometown_state_third_try == "PENN" ~ "PA",
hometown_state_third_try == "TENN" ~ "TN",
hometown_state_third_try == "W VA" | hometown_state_third_try == "WVA" ~ "WV",
hometown_state_third_try == "WASH" ~ "WA",
hometown_state_third_try == "WIS" | hometown_state_third_try == "WISC" ~ "WI",
hometown_state_third_try == "WYO" ~ "WY",
TRUE ~ hometown_state_third_try))
#What's the final state breakdown?
football_rosters_usa_states <- football_rosters_usa %>%
group_by(hometown_state_clean) %>%
summarise(total_players=n()) %>%
arrange(desc(total_players))
#STATES WITH POPULATION DATA
#Let's try to add in some population data and try to figure out the number of Power 5 football players per 100,000 residents in a state
#First, let's get ourselves a dataframe that has state postal abbreviations and their most recent ACS state population:
state_pops_2021 <- get_acs(geography = "state",
variables = "B01003_001",
year = 2021)
state_pops_2021 <- state_pops_2021 %>%
clean_names() %>%
mutate(name_caps = str_to_upper(name)) %>%
mutate(name_caps = case_when(
name_caps == "DISTRICT OF COLUMBIA" ~ "WASHINGTON, DC",
TRUE ~ name_caps
)) %>%
left_join(state_crosswalk, by=c("name_caps" = "state_name_caps"))
state_pops_2021 <- state_pops_2021 %>%
select(state_abb, estimate) %>%
filter(!is.na(state_abb)) #Removed NA value, which was Puerto Rico
# Now, let's join our population data to our state count of football players data:
football_rosters_usa_states <- football_rosters_usa_states %>%
inner_join(state_pops_2021, by=c("hometown_state_clean" = "state_abb"))
football_rosters_usa_states <- football_rosters_usa_states %>%
rename(total_pop = estimate)
football_rosters_usa_states <- football_rosters_usa_states %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/total_pop,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(football_rosters_usa_states, file = "state_counts.csv")
# MISSISSIPPI HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ms <- football_rosters_usa %>%
filter(hometown_state_clean == "MS")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ms <- football_rosters_ms %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 1: Filter for the state's players
football_rosters_ms <- football_rosters_usa %>%
filter(hometown_state_clean == "MS")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ms <- football_rosters_ms %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
View(distinct_hometowns_ms)
View(census_data_ms_2021)
View(distinct_hometowns_la)
View(football_rosters_ms)
View(census_data_la_2021)
View(census_data_ar_2021)
View(distinct_hometowns_al)
View(distinct_hometowns_ar)
View(distinct_hometowns_ms)
View(census_data_ms_2021)
View(census_data_nc_2021)
View(distinct_hometowns_nc)
View(distinct_hometowns_sc)
View(census_data_sc_2021)
View(census_data_tn_2021)
View(football_rosters_tn)
View(hometowns_tn_complete)
View(distinct_hometowns_tn)
View(distinct_hometowns_tx)
View(census_data_tx_2021)
View(census_data_tx_2021)
View(census_data_al_2021)
View(distinct_hometowns_al)
View(distinct_hometowns_ky)
View(distinct_hometowns_ok)
View(census_data_ok_2021)
View(distinct_hometowns_tn)
View(census_data_va_2021)
View(football_rosters_va)
View(distinct_hometowns_va)
View(football_rosters_tn)
View(census_data_tn_2021)
View(distinct_hometowns_tn)
View(distinct_hometowns_small_states)
View(distinct_hometowns_in)
View(distinct_hometowns_in)
View(census_data_in_2021)
View(census_data_ne_2021)
View(distinct_hometowns_ne)
View(distinct_hometowns_la)
View(census_data_la_2021)
View(census_data_md_2021)
View(football_rosters_md)
View(distinct_hometowns_md)
View(distinct_hometowns_sc)
View(distinct_hometowns_fl)
View(distinct_hometowns_az)
View(distinct_hometowns_nc)
View(census_data_nc_2021)
View(census_data_wa_2021)
View(census_data_oh_2021)
View(distinct_hometowns_oh)
View(census_data_small_states_2021)
View(distinct_hometowns_small_states)
View(football_rosters_ia)
View(hometowns_ia_complete)
View(football_rosters_ia)
View(distinct_hometowns_ia)
View(census_data_ia_2021)
View(distinct_hometowns_ia)
View(distinct_hometowns_wi)
View(distinct_hometowns_mi)
View(census_data_mi_2021)
View(census_data_ny_2021)
View(distinct_hometowns_ny)
View(distinct_hometowns_ks)
View(census_data_ks_2021)
View(football_rosters_ma)
View(football_rosters_ky)
View(census_data_ky_2021)
View(distinct_hometowns_ky)
View(distinct_hometowns_or)
View(distinct_hometowns_tx)
View(census_data_tx_2021)
View(census_data_mn_2021)
View(football_rosters_mn)
View(distinct_hometowns_mn)
View(football_rosters_wa)
View(hometowns_nc_complete)
View(census_data_nc_2021)
View(distinct_hometowns_nc)
View(distinct_hometowns_mn)
View(distinct_hometowns_fl)
View(census_data_nc_2021)
View(census_data_fl_2021)
>>>>>>> Stashed changes
#libraries
library(tidyverse)
library(googlesheets4)
library(janitor)
library(tidycensus)
#install.packages("googlesheets4")
#Authenticating with Google account
#gs4_auth()
# Load Census API key
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
# Load ACS crosswalk
acs_2021 <- load_variables(2021, "acs5")
# Load 2020 Census crosswalk
census_2020 <- load_variables(2020, "pl", cache = TRUE)
# Helpful references for using ACS and Census APIs: #https://censusreporter.org/topics/table-codes/
#https://walker-data.com/tidycensus/articles/basic-usage.html
#Load football roster scraper. Also did some cleaning for special cases here. For the players who were missing hometown information, this was obtained by looking at rosters from previous years.
football_rosters <- read_csv("football_roster.csv") %>%
clean_names() %>%
mutate(hometown = case_when(
hometown == "Pompano, Beach, Fla." ~ "Pompano Beach, Fla.",
hometown == "Livemore Calif." ~ "Livemore, Calif.",
hometown == "Washington D.C." ~ "Washington, D.C.",
hometown == "Tampa. Fla." ~ "Tampa, Fla.",
hometown == "Upper Marlboro. Md." ~ "Upper Marlboro, Md.",
hometown == "Norfolk,Va." ~ "Norfolk, Va.",
hometown == "Bronx N.Y." ~ "Bronx, N.Y.",
hometown == "Cocoa Fla." ~ "Cocoa, Fla.",
hometown == "Jefferson" ~ "Jefferson Township, NJ",
hometown == "Melbourne" ~ "Melbourne, FL",
hometown == "Chicago" ~ "Chicago, IL",
hometown == "Cincinnati" ~ "Cincinnati, OH",
hometown == "Cleveland" ~ "Cleveland, OH",
hometown == "St. Louis" ~ "St. Louis, MO",
hometown == "Inglewood" ~ "Inglewood, CA",
hometown == "Chatworth, Ga." ~ "Chatsworth, Ga.",
hometown == "Kingland, Ga." ~ "Kingsland, Ga.",
hometown == "East Cobb, GA" ~ "Marietta, GA",
hometown == "Platville, Ala." ~ "Prattville, Ala.",
TRUE ~ hometown)) %>%
mutate(hometown = case_when(
name == "Feyisayo Oluleye" ~ "Lancaster, PA",
name == "Kyle Vaccarella" ~ "Fairfield, CT",
TRUE ~ hometown))
#Let's also use this as a time to load a state crosswalk we'll use later
state_crosswalk <- read_csv("state_crosswalk.csv") %>%
mutate(state_name_caps = str_to_upper(state_name)) %>%
select(state_abb, state_name_caps)
#Let's load some hometowns that we passed through and cleaned with Open Refine
hometowns_open_refine <- read_csv("hometowns_open_refine.csv")
#Checking to see that we have 68 schools and the player counts for each school
# school_check <- football_rosters %>%
#   group_by(school) %>%
#   summarise(total_players = n()) %>%
#   arrange(total_players)
#Checking to make sure there are no duplicate players
# player_check <- football_rosters %>%
#   group_by(name, school) %>%
#   summarise(total = n()) %>%
#   arrange(desc(total))
#CLEANING/STANDARDIZING STATE
#Splitting the hometown column so we can work with the state
football_rosters <- football_rosters %>%
mutate(hometown_cleaning = hometown) %>%
separate(hometown_cleaning, into = c("hometown_city", "hometown_state", "hometown_country"), sep = ", ")
#What kind of values are we getting in hometown_state?
state_check <- football_rosters %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Many of those aren't U.S. states. Let's make a new dataframe that only has players from the 50 states:
excluded_states <- c(" Western Australia", "Alberta", "American Samoa", "Australia", "Bahamas", "Belgium", "Canada", "China", "Colombia", "Congo", "County Kerry", "Denmark", "DR of the Congo", "England", "Finland", "France", "Gabon", "Germany", "Ghana", "Ireland", "Japan", "Manitoba", "Mexico", "N.S.", "New South Wales", "New Zealand", "Nigeria", "NSW", "Ont.", "Ontario", "QC", "Que.", "Quebec", "Québec", "Queensland", "Saskatchewan", "Serbia", "South Africa", "South Australia", "Sweden", "Switzerland", "The Netherlands", "Tonga", "United Kingdom", "Victoria", "Victoria AU", "Western Samoa")
football_rosters_usa <- football_rosters %>%
filter(!(hometown_state %in% excluded_states) | is.na(hometown_state)) %>%
mutate(hometown_state = case_when(
hometown_state == "Maui" ~ "HI",
hometown_state == "New York City" ~ "NY",
TRUE ~ hometown_state))
#And now let's recheck those hometown_state values:
state_check_usa <- football_rosters_usa %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Let's standardize these to the state postal abbreviation:
#First, let's try removing punctuation and making everything upper case:
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_first_try = str_to_upper(gsub("[[:punct:]]", "", hometown_state)))
#Second, let's see if we can use our crosswalk:
football_rosters_usa <- football_rosters_usa %>%
left_join(state_crosswalk, by=c("hometown_state_first_try" = "state_name_caps"))
football_rosters_usa <- football_rosters_usa %>%
rename(hometown_state_second_try = state_abb)
#Third, let's combine the results of our first two tries and check to see how much that reduced our unique values
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_third_try = ifelse(is.na(hometown_state_second_try), hometown_state_first_try, hometown_state_second_try))
state_check_usa_update <- football_rosters_usa %>%
group_by(hometown_state_third_try) %>%
summarise(total = n()) %>%
arrange(hometown_state_third_try)
#Now we're down to much fewer state values. Let's manually take care of the rest.
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_clean = case_when(
hometown_state_third_try == "ALA" ~ "AL",
hometown_state_third_try == "ARIZ" ~ "AZ",
hometown_state_third_try == "ARK" ~ "AR",
hometown_state_third_try == "CALF" | hometown_state_third_try == "CALIF" ~ "CA",
hometown_state_third_try == "COL" | hometown_state_third_try == "COLO" ~ "CO",
hometown_state_third_try == "CONN" ~ "CT",
hometown_state_third_try == "DEL" ~ "DE",
hometown_state_third_try == "FLA" ~ "FL",
hometown_state_third_try == "ILL" ~ "IL",
hometown_state_third_try == "IND" ~ "IN",
hometown_state_third_try == "KAN" ~ "KS",
hometown_state_third_try == "MASS" ~ "MA",
hometown_state_third_try == "MICH" ~ "MI",
hometown_state_third_try == "MINN" ~ "MN",
hometown_state_third_try == "MISS" ~ "MS",
hometown_state_third_try == "MONT" ~ "MT",
hometown_state_third_try == "NEB" ~ "NE",
hometown_state_third_try == "NEV" ~ "NV",
hometown_state_third_try == "OKLA" ~ "OK",
hometown_state_third_try == "ORE" ~ "OR",
hometown_state_third_try == "PENN" ~ "PA",
hometown_state_third_try == "TENN" ~ "TN",
hometown_state_third_try == "W VA" | hometown_state_third_try == "WVA" ~ "WV",
hometown_state_third_try == "WASH" ~ "WA",
hometown_state_third_try == "WIS" | hometown_state_third_try == "WISC" ~ "WI",
hometown_state_third_try == "WYO" ~ "WY",
TRUE ~ hometown_state_third_try))
#What's the final state breakdown?
football_rosters_usa_states <- football_rosters_usa %>%
group_by(hometown_state_clean) %>%
summarise(total_players=n()) %>%
arrange(desc(total_players))
#STATES WITH POPULATION DATA
#Let's try to add in some population data and try to figure out the number of Power 5 football players per 100,000 residents in a state
#First, let's get ourselves a dataframe that has state postal abbreviations and their most recent ACS state population:
state_pops_2021 <- get_acs(geography = "state",
variables = "B01003_001",
year = 2021)
state_pops_2021 <- state_pops_2021 %>%
clean_names() %>%
mutate(name_caps = str_to_upper(name)) %>%
mutate(name_caps = case_when(
name_caps == "DISTRICT OF COLUMBIA" ~ "WASHINGTON, DC",
TRUE ~ name_caps
)) %>%
left_join(state_crosswalk, by=c("name_caps" = "state_name_caps"))
state_pops_2021 <- state_pops_2021 %>%
select(state_abb, estimate) %>%
filter(!is.na(state_abb)) #Removed NA value, which was Puerto Rico
# Now, let's join our population data to our state count of football players data:
football_rosters_usa_states <- football_rosters_usa_states %>%
inner_join(state_pops_2021, by=c("hometown_state_clean" = "state_abb"))
football_rosters_usa_states <- football_rosters_usa_states %>%
rename(total_pop = estimate)
football_rosters_usa_states <- football_rosters_usa_states %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/total_pop,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(football_rosters_usa_states, file = "state_counts.csv")
# START TO CLEAN/STANDARDIZE HOMETOWNS
# CSV - going to try cleaning this through Open Refine
#write_csv(distinct_hometowns, file = "hometowns_to_clean.csv")
#Join our Open Refine dataframe to our dataframe of Power Five players
hometowns_open_refine_modified <- hometowns_open_refine %>%
select(hometown_city, hometown_city_clean, hometown_state_clean)
football_rosters_usa <- football_rosters_usa %>%
left_join(hometowns_open_refine_modified, by = c("hometown_city", "hometown_state_clean")) %>%
mutate(hometown_city_clean = case_when(
name == 'DJ Uiagalelei' ~ "Riverside",
name == 'AJ Duffy' ~ "Moreno Valley",
name == 'Izayah  Reeves' ~ "Hempstead",
name == 'Jawhar Jordan' ~ "Farmingdale",
name == 'Anthony Gangi' ~ "Oyster Bay",
TRUE ~ hometown_city_clean)) #These lines of code are for two players from Inland Empire, California, a large region of California that includes dozens of incorporated cities, and three players from Long Island, New York.
distinct_hometowns <- football_rosters_usa %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total = n())
#From here, the best way to continue working on this will likely be state-by-state
# ALABAMA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_al <- football_rosters_usa %>%
filter(hometown_state_clean == "AL")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_al <- football_rosters_al %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_al_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "AL",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_al_2021 <- census_data_al_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_al_2021 <- census_data_al_2021 %>%
mutate(state = case_when(
state == 'Alabama' ~ "AL"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_al_complete <- distinct_hometowns_al %>%
left_join(census_data_al_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_al_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Highland Home, AL, the zip code (36041) seems to be a good substitute: https://censusreporter.org/profiles/86000US36041-36041/
census_data_highland_al_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 36041") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "AL") %>%
mutate(city = case_when(
city == "ZCTA5 36041" ~ "Highland Home")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Watson, AL, data obtained using population of nearby Brookside, AL, which seems to include Watson https://censusreporter.org/profiles/16000US0109736-brookside-al/
census_data_watson_al_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "AL",
output = "wide") %>%
clean_names() %>%
filter(name == "Brookside town, Alabama") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "AL") %>%
mutate(city = case_when(
city == "Brookside town, Alabama" ~ "Watson")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_al_2021 <- bind_rows(census_data_al_2021, census_data_highland_al_2021, census_data_watson_al_2021)
hometowns_al_complete <- distinct_hometowns_al %>%
left_join(census_data_al_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_al_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_al_complete, file = "hometowns_al.csv")
View(hometowns_al_complete)
# Figuring out Black population in Alabama
black_pop_al_2021 <- get_acs(geography = "state",
variables = c("B01003_001", "B02001_003"),
year = 2021,
state = "AL",
output = "wide")
View(black_pop_al_2021)
# Figuring out Black population in Alabama
black_pop_al_2021 <- get_acs(geography = "state",
variables = c("B01003_001", "B02001_003"),
year = 2021,
state = "AL",
output = "wide") %>%
clean_names() %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Figuring out Black population in Alabama
black_pop_al_2021 <- get_acs(geography = "state",
variables = c("B01003_001", "B02001_003"),
year = 2021,
state = "AL",
output = "wide") %>%
clean_names() %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
select(geoid, name, total_pop, black_pop, pct_black)
pct_black_al <- black_pop_al_2021$pct_black
# Add to hometowns dataframe
hometowns_al_complete <- hometowns_al_complete %>%
mutate(black_pop_vs_state = if_else(
pct_black > pct_black_al, "above", "below"))
# XX
race_analysis_al <- hometowns_al_complete %>%
group_by(black_pop_vs_state) %>%
summarize(
sum_total_pop = sum(total_pop),
sum_total_players = sum(total_players)
)
View(race_analysis_al)
# XX
race_analysis_al <- hometowns_al_complete %>%
group_by(black_pop_vs_state) %>%
summarize(
sum_total_pop = sum(total_pop),
sum_total_players = sum(total_players)
) %>%
mutate(players_per_thousand = round((sum_total_players*1000)/sum_total_pop,1))
# XX
race_analysis_al <- hometowns_al_complete %>%
group_by(black_pop_vs_state) %>%
summarize(
sum_total_pop = sum(total_pop),
sum_total_players = sum(total_players)
) %>%
mutate(players_per_thousand = round((sum_total_players*1000000)/sum_total_pop,1))
View(state_pops_2021)
View(state_crosswalk)
View(state_check_usa_update)
View(state_check_usa)
View(state_check)
# XX
race_analysis_al <- hometowns_al_complete %>%
group_by(black_pop_vs_state) %>%
summarize(
sum_total_pop = sum(total_pop),
sum_total_players = sum(total_players)
) %>%
mutate(players_per_hundred_thousand = round((sum_total_players*1000000)/sum_total_pop,1))
