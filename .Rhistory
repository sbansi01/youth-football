output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(name = case_when(
name == 'ZCTA5 30294' ~ "Ellenwood")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Ellenwood, GA, the zip code (30294) seems to be a good substitute: https://censusreporter.org/profiles/86000US30294-30294/
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(name = case_when(
city == 'ZCTA5 30294' ~ "Ellenwood")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Ellenwood, GA, the zip code (30294) seems to be a good substitute: https://censusreporter.org/profiles/86000US30294-30294/
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(name = case_when(
city == 'ZCTA5 30294' ~ "Ellenwood")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Ellenwood, GA, the zip code (30294) seems to be a good substitute: https://censusreporter.org/profiles/86000US30294-30294/
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(name = case_when(
city == 'ZCTA5 30294' ~ "Ellenwood")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e)
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA")
# For Ellenwood, GA, the zip code (30294) seems to be a good substitute: https://censusreporter.org/profiles/86000US30294-30294/
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(name = case_when(
city == "ZCTA5 30294" ~ "Ellenwood")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Ellenwood, GA, the zip code (30294) seems to be a good substitute: https://censusreporter.org/profiles/86000US30294-30294/
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(name = case_when(
city == "ZCTA5 30294" ~ "Ellenwood",
TRUE ~ city)) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Ellenwood, GA, the zip code (30294) seems to be a good substitute: https://censusreporter.org/profiles/86000US30294-30294/
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30294" ~ "Ellenwood")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Rabun Gap, GA, the zip code (30568) seems to be a good substitute: https://censusreporter.org/profiles/86000US30568-30568/
census_data_rabun_gap_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30568") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30568" ~ "Rabun Gap")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
View(census_data_rabun_gap_ga_2021)
# For Rabun Gap, GA, the zip code (30568) seems to be a good substitute: https://censusreporter.org/profiles/86000US30568-30568/
census_data_rabun_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30568") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30568" ~ "Rabun Gap")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Rex, GA, the zip code (30273) seems to be a good substitute: https://censusreporter.org/profiles/86000US30273-30273/
census_data_rex_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30273") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30273" ~ "Rex")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
View(census_data_rex_ga_2021)
census_data_sublinga_ga_2021 <- get_acs(geography = "cbg",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide")
census_data_sublinga_ga_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide")
census_data_sublinga_ga_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "GA",
output = "wide")
View(census_data_sublinga_ga_2021)
# For Sublinga, GA, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US130550101002-bg-2-tract-101-chattooga-ga/
census_data_sublinga_ga_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "GA",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 2, Census Tract 101, Chattooga County, Georgia") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "Block Group 2, Census Tract 101, Chattooga County, Georgia" ~ "Sublinga")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ga_2021 <- bind_rows(census_data_ga_2021, census_data_ellenwood_ga_2021, census_data_rabun_ga_2021, census_data_rex_ga_2021, census_data_sublinga_ga_2021)
View(census_data_ga_2021)
hometowns_ga_complete <- distinct_hometowns_ga %>%
left_join(census_data_ga_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_ga_complete)
# For Subligna, GA, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US130550101002-bg-2-tract-101-chattooga-ga/
census_data_subligna_ga_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "GA",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 2, Census Tract 101, Chattooga County, Georgia") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "Block Group 2, Census Tract 101, Chattooga County, Georgia" ~ "Subligna")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ga_2021 <- bind_rows(census_data_ga_2021, census_data_ellenwood_ga_2021, census_data_rabun_ga_2021, census_data_rex_ga_2021, census_data_subligna_ga_2021)
hometowns_ga_complete <- distinct_hometowns_ga %>%
left_join(census_data_ga_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ga_complete %>%
filter(is.na(geoid))
hometowns_ga_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 1: Filter for the state's players
football_rosters_al <- football_rosters_usa %>%
filter(hometown_state_clean == "AL")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_al <- football_rosters_al %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
View(distinct_hometowns_al)
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_al_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "AL",
output = "wide")
View(census_data_al_2021)
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_al_2021 <- census_data_al_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ga_2021 <- census_data_ga_2021 %>%
mutate(state = case_when(
state == 'Alabama' ~ "AL"))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_al_2021 <- census_data_al_2021 %>%
mutate(state = case_when(
state == 'Alabama' ~ "AL"))
# GEORGIA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ga <- football_rosters_usa %>%
filter(hometown_state_clean == "GA")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ga <- football_rosters_ga %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ga_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "GA",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_ga_2021 <- census_data_ga_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ga_2021 <- census_data_ga_2021 %>%
mutate(state = case_when(
state == 'Georgia' ~ "GA")) %>%
mutate(city = case_when(
city == 'Athens-Clarke County unified government (balance)' ~ "Athens",
city == 'Macon-Bibb County' ~ "Macon",
city == 'McRae-Helena' ~ 'McRae',
TRUE ~ city))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_ga_complete <- distinct_hometowns_ga %>%
left_join(census_data_ga_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_ga_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Ellenwood, GA, the zip code (30294) seems to be a good substitute: https://censusreporter.org/profiles/86000US30294-30294/
census_data_ellenwood_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30294") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30294" ~ "Ellenwood")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Rabun Gap, GA, the zip code (30568) seems to be a good substitute: https://censusreporter.org/profiles/86000US30568-30568/
census_data_rabun_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30568") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30568" ~ "Rabun Gap")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Rex, GA, the zip code (30273) seems to be a good substitute: https://censusreporter.org/profiles/86000US30273-30273/
census_data_rex_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30273") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30273" ~ "Rex")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Subligna, GA, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US130550101002-bg-2-tract-101-chattooga-ga/
census_data_subligna_ga_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "GA",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 2, Census Tract 101, Chattooga County, Georgia") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "Block Group 2, Census Tract 101, Chattooga County, Georgia" ~ "Subligna")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ga_2021 <- bind_rows(census_data_ga_2021, census_data_ellenwood_ga_2021, census_data_rabun_ga_2021, census_data_rex_ga_2021, census_data_subligna_ga_2021)
hometowns_ga_complete <- distinct_hometowns_ga %>%
left_join(census_data_ga_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ga_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ga_complete, file = "hometowns_ga.csv")
View(football_rosters_ga)
View(hometowns_ga_complete)
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_al_complete <- distinct_hometowns_al %>%
left_join(census_data_al_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_al_complete)
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_al_complete %>%
filter(is.na(geoid))
# For Highland Home, AL, the zip code (36041) seems to be a good substitute: https://censusreporter.org/profiles/86000US36041-36041/
census_data_highland_al_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 36041") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 36041" ~ "Highland Home")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
View(census_data_highland_al_2021)
# For Highland Home, AL, the zip code (36041) seems to be a good substitute: https://censusreporter.org/profiles/86000US36041-36041/
census_data_highland_al_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 36041") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "AL") %>%
mutate(city = case_when(
city == "ZCTA5 36041" ~ "Highland Home")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_al_complete %>%
filter(is.na(geoid))
View(census_data_al_2021)
census_data_watson_al_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "GA",
output = "wide")
View(census_data_watson_al_2021)
census_data_watson_al_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "AL",
output = "wide")
# For Watson, AL, data obtained using population of nearby Brookside, AL, which seems to include Watson https://censusreporter.org/profiles/16000US0109736-brookside-al/
census_data_watson_al_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "AL",
output = "wide") %>%
clean_names() %>%
filter(name == "Brookside town, Alabama") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "AL") %>%
mutate(city = case_when(
city == "Brookside town, Alabama" ~ "Watson")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_al_2021 <- bind_rows(census_data_al_2021, census_data_highland_al_2021, census_data_watson_al_2021)
View(census_data_al_2021)
hometowns_al_complete <- distinct_hometowns_al %>%
left_join(census_data_al_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_al_complete)
hometowns_al_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 1: Filter for the state's players
football_rosters_ms <- football_rosters_usa %>%
filter(hometown_state_clean == "MS")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ms <- football_rosters_ms %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
View(distinct_hometowns_ms)
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ms_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "MS",
output = "wide")
View(census_data_ms_2021)
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_ms_2021 <- census_data_ms_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ms_2021 <- census_data_ms_2021 %>%
mutate(state = case_when(
state == 'Mississippi' ~ "MS"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_ms_complete <- distinct_hometowns_ms %>%
left_join(census_data_ms_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_ms_complete)
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_ms_complete %>%
filter(is.na(geoid))
# For Nesbit, MS, the zip code (38651) seems to be a good substitute: https://censusreporter.org/profiles/86000US38651-38651/
census_data_nesbit_ms_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 38651") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "MS") %>%
mutate(city = case_when(
city == "ZCTA5 38651" ~ "Nesbit")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
View(census_data_nesbit_ms_2021)
census_data_friendship_ms_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "MS",
output = "wide") %>%
clean_names()
View(census_data_friendship_ms_2021)
# For Friendship, MS data obtained using population of nearby Collins, MS, where the player went to HS https://censusreporter.org/profiles/16000US2815140-collins-ms/
census_data_friendship_ms_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "MS",
output = "wide") %>%
clean_names() %>%
filter(name == "Collins city, Mississippi") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "MS") %>%
mutate(city = case_when(
city == "Collins city, Mississippi" ~ "Friendship")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Friendship, MS data obtained using population of nearby Collins, MS, where the player went to HS https://censusreporter.org/profiles/16000US2815140-collins-ms/
census_data_friendship_ms_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "MS",
output = "wide") %>%
clean_names() %>%
filter(name == "Collins city, Mississippi") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "MS") %>%
mutate(city = case_when(
city == "Collins city, Mississippi" ~ "Friendship")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ms_2021 <- bind_rows(census_data_ms_2021, census_data_nesbit_ms_2021, census_data_friendship_ms_2021)
hometowns_ms_complete <- distinct_hometowns_ms %>%
left_join(census_data_ms_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ms_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
