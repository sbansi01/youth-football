hometown == "St. Louis" ~ "St. Louis, MO",
hometown == "Inglewood" ~ "Inglewood, CA",
hometown == "Chatworth, Ga." ~ "Chatsworth, Ga.",
hometown == "Kingland, Ga." ~ "Kingsland, Ga.",
hometown == "East Cobb, GA" ~ "Marietta, GA",
hometown == "Platville, Ala." ~ "Prattville, Ala.",
TRUE ~ hometown)) %>%
mutate(hometown = case_when(
name == "Feyisayo Oluleye" ~ "Lancaster, PA",
name == "Kyle Vaccarella" ~ "Fairfield, CT",
TRUE ~ hometown))
#Let's also use this as a time to load a state crosswalk we'll use later
state_crosswalk <- read_csv("state_crosswalk.csv") %>%
mutate(state_name_caps = str_to_upper(state_name)) %>%
select(state_abb, state_name_caps)
#Let's load some hometowns that we passed through and cleaned with Open Refine
hometowns_open_refine <- read_csv("hometowns_open_refine.csv")
#Checking to see that we have 68 schools and the player counts for each school
# school_check <- football_rosters %>%
#   group_by(school) %>%
#   summarise(total_players = n()) %>%
#   arrange(total_players)
#Checking to make sure there are no duplicate players
# player_check <- football_rosters %>%
#   group_by(name, school) %>%
#   summarise(total = n()) %>%
#   arrange(desc(total))
#CLEANING/STANDARDIZING STATE
#Splitting the hometown column so we can work with the state
football_rosters <- football_rosters %>%
mutate(hometown_cleaning = hometown) %>%
separate(hometown_cleaning, into = c("hometown_city", "hometown_state", "hometown_country"), sep = ", ")
#What kind of values are we getting in hometown_state?
state_check <- football_rosters %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Many of those aren't U.S. states. Let's make a new dataframe that only has players from the 50 states:
excluded_states <- c(" Western Australia", "Alberta", "American Samoa", "Australia", "Bahamas", "Belgium", "Canada", "China", "Colombia", "Congo", "County Kerry", "Denmark", "DR of the Congo", "England", "Finland", "France", "Gabon", "Germany", "Ghana", "Ireland", "Japan", "Manitoba", "Mexico", "N.S.", "New South Wales", "New Zealand", "Nigeria", "NSW", "Ont.", "Ontario", "QC", "Que.", "Quebec", "QuÃ©bec", "Queensland", "Saskatchewan", "Serbia", "South Africa", "South Australia", "Sweden", "Switzerland", "The Netherlands", "Tonga", "United Kingdom", "Victoria", "Victoria AU", "Western Samoa")
football_rosters_usa <- football_rosters %>%
filter(!(hometown_state %in% excluded_states) | is.na(hometown_state)) %>%
mutate(hometown_state = case_when(
hometown_state == "Maui" ~ "HI",
hometown_state == "New York City" ~ "NY",
TRUE ~ hometown_state))
#And now let's recheck those hometown_state values:
state_check_usa <- football_rosters_usa %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Let's standardize these to the state postal abbreviation:
#First, let's try removing punctuation and making everything upper case:
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_first_try = str_to_upper(gsub("[[:punct:]]", "", hometown_state)))
#Second, let's see if we can use our crosswalk:
football_rosters_usa <- football_rosters_usa %>%
left_join(state_crosswalk, by=c("hometown_state_first_try" = "state_name_caps"))
football_rosters_usa <- football_rosters_usa %>%
rename(hometown_state_second_try = state_abb)
#Third, let's combine the results of our first two tries and check to see how much that reduced our unique values
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_third_try = ifelse(is.na(hometown_state_second_try), hometown_state_first_try, hometown_state_second_try))
state_check_usa_update <- football_rosters_usa %>%
group_by(hometown_state_third_try) %>%
summarise(total = n()) %>%
arrange(hometown_state_third_try)
#Now we're down to much fewer state values. Let's manually take care of the rest.
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_clean = case_when(
hometown_state_third_try == "ALA" ~ "AL",
hometown_state_third_try == "ARIZ" ~ "AZ",
hometown_state_third_try == "ARK" ~ "AR",
hometown_state_third_try == "CALF" | hometown_state_third_try == "CALIF" ~ "CA",
hometown_state_third_try == "COL" | hometown_state_third_try == "COLO" ~ "CO",
hometown_state_third_try == "CONN" ~ "CT",
hometown_state_third_try == "DEL" ~ "DE",
hometown_state_third_try == "FLA" ~ "FL",
hometown_state_third_try == "ILL" ~ "IL",
hometown_state_third_try == "IND" ~ "IN",
hometown_state_third_try == "KAN" ~ "KS",
hometown_state_third_try == "MASS" ~ "MA",
hometown_state_third_try == "MICH" ~ "MI",
hometown_state_third_try == "MINN" ~ "MN",
hometown_state_third_try == "MISS" ~ "MS",
hometown_state_third_try == "MONT" ~ "MT",
hometown_state_third_try == "NEB" ~ "NE",
hometown_state_third_try == "NEV" ~ "NV",
hometown_state_third_try == "OKLA" ~ "OK",
hometown_state_third_try == "ORE" ~ "OR",
hometown_state_third_try == "PENN" ~ "PA",
hometown_state_third_try == "TENN" ~ "TN",
hometown_state_third_try == "W VA" | hometown_state_third_try == "WVA" ~ "WV",
hometown_state_third_try == "WASH" ~ "WA",
hometown_state_third_try == "WIS" | hometown_state_third_try == "WISC" ~ "WI",
hometown_state_third_try == "WYO" ~ "WY",
TRUE ~ hometown_state_third_try))
#What's the final state breakdown?
football_rosters_usa_states <- football_rosters_usa %>%
group_by(hometown_state_clean) %>%
summarise(total_players=n()) %>%
arrange(desc(total_players))
#STATES WITH POPULATION DATA
#Let's try to add in some population data and try to figure out the number of Power 5 football players per 100,000 residents in a state
#First, let's get ourselves a dataframe that has state postal abbreviations and their most recent ACS state population:
state_pops_2021 <- get_acs(geography = "state",
variables = "B01003_001",
year = 2021)
state_pops_2021 <- state_pops_2021 %>%
clean_names() %>%
mutate(name_caps = str_to_upper(name)) %>%
mutate(name_caps = case_when(
name_caps == "DISTRICT OF COLUMBIA" ~ "WASHINGTON, DC",
TRUE ~ name_caps
)) %>%
left_join(state_crosswalk, by=c("name_caps" = "state_name_caps"))
state_pops_2021 <- state_pops_2021 %>%
select(state_abb, estimate) %>%
filter(!is.na(state_abb)) #Removed NA value, which was Puerto Rico
# Now, let's join our population data to our state count of football players data:
football_rosters_usa_states <- football_rosters_usa_states %>%
inner_join(state_pops_2021, by=c("hometown_state_clean" = "state_abb"))
football_rosters_usa_states <- football_rosters_usa_states %>%
rename(total_pop = estimate)
football_rosters_usa_states <- football_rosters_usa_states %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/total_pop,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(football_rosters_usa_states, file = "state_counts.csv")
# START TO CLEAN/STANDARDIZE HOMETOWNS
# CSV - going to try cleaning this through Open Refine
#write_csv(distinct_hometowns, file = "hometowns_to_clean.csv")
#Join our Open Refine dataframe to our dataframe of Power Five players
hometowns_open_refine_modified <- hometowns_open_refine %>%
select(hometown_city, hometown_city_clean, hometown_state_clean)
football_rosters_usa <- football_rosters_usa %>%
left_join(hometowns_open_refine_modified, by = c("hometown_city", "hometown_state_clean"))
distinct_hometowns <- football_rosters_usa %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total = n())
#From here, the best way to continue working on this will likely be state-by-state
# Step 1: Filter for the state's players
football_rosters_nj <- football_rosters_usa %>%
filter(hometown_state_clean == "NJ")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_nj <- football_rosters_nj %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_nj_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_nj_2021 <- census_data_nj_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_nj_2021 <- census_data_nj_2021 %>%
mutate(state = case_when(
state == 'New Jersey' ~ "NJ")) %>%
mutate(city = case_when(
city == 'Egg Harbor' ~ "Egg Harbor Township",
city == 'Jefferson' ~ "Jefferson Township",
city == 'Ocean' ~ "Ocean Township",
TRUE ~ city))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_nj_complete <- distinct_hometowns_nj %>%
left_join(census_data_nj_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_nj_complete)
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_nj_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide")
View(census_data_nj_2021)
# It turns out that many towns in New Jersey are county subdivisions, so we will grab those, too
census_data_nj_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide")
View(census_data_nj_subdivisions_2021)
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_nj_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide")
# It turns out that many towns in New Jersey are county subdivisions, so we will grab the relevant ones of those, too
census_data_nj_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide") %>%
filter(NAME == "Aberdeen township, Monmouth County, New Jersey" | NAME == "Bridgewater township, Somerset County, New Jersey" | NAME == "Cinnaminson township, Burlington County, New Jersey" | NAME == "Colts Neck township, Monmouth County, New Jersey" | NAME == "Delran township, Burlington County, New Jersey" | NAME == "Egg Harbor township, Atlantic County, New Jersey" | NAME == "Fredon township, Sussex County, New Jersey" | NAME == "Galloway township, Atlantic County, New Jersey" | NAME == "Gloucester township, Camden County, New Jersey" | NAME == "Hainesport township, Burlington County, New Jersey" | NAME == "Hillside township, Union County, New Jersey" | NAME == "Holland township, Hunterdon County, New Jersey" | NAME == "Holmdel township, Monmouth County, New Jersey" | NAME == "Irvington township, Essex County, New Jersey" | NAME == "Jackson township, Ocean County, New Jersey" | NAME == "Jefferson township, Morris County, New Jersey" | NAME == "Medford township, Burlington County, New Jersey" | NAME == "Middletown township, Monmouth County, New Jersey" | NAME == "Montclair township, Essex County, New Jersey" | NAME == "Moorestown township, Burlington County, New Jersey" | NAME == "Mount Laurel township, Burlington County, New Jersey" | NAME == "Ocean township, Monmouth County, New Jersey" | NAME == "Pennsauken township, Camden County, New Jersey" | NAME == "Plainsboro township, Middlesex County, New Jersey" | NAME == "Robbinsville township, Mercer County, New Jersey" | NAME == "South Brunswick township, Middlesex County, New Jersey" | NAME == "Teaneck township, Bergen County, New Jersey" | NAME == "Union township, Union County, New Jersey" | NAME == "Verona township, Essex County, New Jersey" | NAME == "Warren township, Somerset County, New Jersey" | NAME == "Wayne township, Passaic County, New Jersey" | NAME == "West Deptford township, Gloucester County, New Jersey" | NAME == "West Orange township, Essex County, New Jersey" | NAME == "Willingboro township, Burlington County, New Jersey")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_nj_2021 <- census_data_nj_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_nj_subdivisions_2021 <- census_data_nj_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality|township|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_nj_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide")
# It turns out that many towns in New Jersey are county subdivisions, so we will grab the relevant ones of those, too
census_data_nj_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide") %>%
filter(NAME == "Aberdeen township, Monmouth County, New Jersey" | NAME == "Bridgewater township, Somerset County, New Jersey" | NAME == "Cinnaminson township, Burlington County, New Jersey" | NAME == "Colts Neck township, Monmouth County, New Jersey" | NAME == "Delran township, Burlington County, New Jersey" | NAME == "Egg Harbor township, Atlantic County, New Jersey" | NAME == "Fredon township, Sussex County, New Jersey" | NAME == "Galloway township, Atlantic County, New Jersey" | NAME == "Gloucester township, Camden County, New Jersey" | NAME == "Hainesport township, Burlington County, New Jersey" | NAME == "Hillside township, Union County, New Jersey" | NAME == "Holland township, Hunterdon County, New Jersey" | NAME == "Holmdel township, Monmouth County, New Jersey" | NAME == "Irvington township, Essex County, New Jersey" | NAME == "Jackson township, Ocean County, New Jersey" | NAME == "Jefferson township, Morris County, New Jersey" | NAME == "Medford township, Burlington County, New Jersey" | NAME == "Middletown township, Monmouth County, New Jersey" | NAME == "Montclair township, Essex County, New Jersey" | NAME == "Moorestown township, Burlington County, New Jersey" | NAME == "Mount Laurel township, Burlington County, New Jersey" | NAME == "Ocean township, Monmouth County, New Jersey" | NAME == "Pennsauken township, Camden County, New Jersey" | NAME == "Plainsboro township, Middlesex County, New Jersey" | NAME == "Robbinsville township, Mercer County, New Jersey" | NAME == "South Brunswick township, Middlesex County, New Jersey" | NAME == "Teaneck township, Bergen County, New Jersey" | NAME == "Union township, Union County, New Jersey" | NAME == "Verona township, Essex County, New Jersey" | NAME == "Warren township, Somerset County, New Jersey" | NAME == "Wayne township, Passaic County, New Jersey" | NAME == "West Deptford township, Gloucester County, New Jersey" | NAME == "West Orange township, Essex County, New Jersey" | NAME == "Willingboro township, Burlington County, New Jersey")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_nj_2021 <- census_data_nj_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_nj_subdivisions_2021 <- census_data_nj_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality|township|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_nj_2021 <- bind_rows(census_data_nj_2021, census_data_nj_subdivisions_2021)
View(census_data_nj_2021)
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_nj_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide")
View(census_data_nj_2021)
# It turns out that many towns in New Jersey are county subdivisions, so we will grab the relevant ones of those, too
census_data_nj_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide") %>%
filter(NAME == "Aberdeen township, Monmouth County, New Jersey" | NAME == "Bridgewater township, Somerset County, New Jersey" | NAME == "Cinnaminson township, Burlington County, New Jersey" | NAME == "Colts Neck township, Monmouth County, New Jersey" | NAME == "Delran township, Burlington County, New Jersey" | NAME == "Egg Harbor township, Atlantic County, New Jersey" | NAME == "Fredon township, Sussex County, New Jersey" | NAME == "Galloway township, Atlantic County, New Jersey" | NAME == "Gloucester township, Camden County, New Jersey" | NAME == "Hainesport township, Burlington County, New Jersey" | NAME == "Hillside township, Union County, New Jersey" | NAME == "Holland township, Hunterdon County, New Jersey" | NAME == "Holmdel township, Monmouth County, New Jersey" | NAME == "Irvington township, Essex County, New Jersey" | NAME == "Jackson township, Ocean County, New Jersey" | NAME == "Jefferson township, Morris County, New Jersey" | NAME == "Medford township, Burlington County, New Jersey" | NAME == "Middletown township, Monmouth County, New Jersey" | NAME == "Montclair township, Essex County, New Jersey" | NAME == "Moorestown township, Burlington County, New Jersey" | NAME == "Mount Laurel township, Burlington County, New Jersey" | NAME == "Ocean township, Monmouth County, New Jersey" | NAME == "Pennsauken township, Camden County, New Jersey" | NAME == "Plainsboro township, Middlesex County, New Jersey" | NAME == "Robbinsville township, Mercer County, New Jersey" | NAME == "South Brunswick township, Middlesex County, New Jersey" | NAME == "Teaneck township, Bergen County, New Jersey" | NAME == "Union township, Union County, New Jersey" | NAME == "Verona township, Essex County, New Jersey" | NAME == "Warren township, Somerset County, New Jersey" | NAME == "Wayne township, Passaic County, New Jersey" | NAME == "West Deptford township, Gloucester County, New Jersey" | NAME == "West Orange township, Essex County, New Jersey" | NAME == "Willingboro township, Burlington County, New Jersey")
View(census_data_nj_subdivisions_2021)
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_nj_2021 <- census_data_nj_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_nj_subdivisions_2021 <- census_data_nj_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality|township|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_nj_2021 <- bind_rows(census_data_nj_2021, census_data_nj_subdivisions_2021) %>%
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_nj_2021 <- census_data_nj_2021 %>%
mutate(state = case_when(
state == 'New Jersey' ~ "NJ")) %>%
mutate(city = case_when(
city == 'Egg Harbor' ~ "Egg Harbor Township",
city == 'Jefferson' ~ "Jefferson Township",
city == 'Ocean' ~ "Ocean Township",
TRUE ~ city))
census_data_nj_2021 <- bind_rows(census_data_nj_2021, census_data_nj_subdivisions_2021)
# Step 1: Filter for the state's players
football_rosters_nj <- football_rosters_usa %>%
filter(hometown_state_clean == "NJ")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_nj <- football_rosters_nj %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_nj_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide")
# It turns out that many towns in New Jersey are county subdivisions, so we will grab the relevant ones of those, too
census_data_nj_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NJ",
output = "wide") %>%
filter(NAME == "Aberdeen township, Monmouth County, New Jersey" | NAME == "Bridgewater township, Somerset County, New Jersey" | NAME == "Cinnaminson township, Burlington County, New Jersey" | NAME == "Colts Neck township, Monmouth County, New Jersey" | NAME == "Delran township, Burlington County, New Jersey" | NAME == "Egg Harbor township, Atlantic County, New Jersey" | NAME == "Fredon township, Sussex County, New Jersey" | NAME == "Galloway township, Atlantic County, New Jersey" | NAME == "Gloucester township, Camden County, New Jersey" | NAME == "Hainesport township, Burlington County, New Jersey" | NAME == "Hillside township, Union County, New Jersey" | NAME == "Holland township, Hunterdon County, New Jersey" | NAME == "Holmdel township, Monmouth County, New Jersey" | NAME == "Irvington township, Essex County, New Jersey" | NAME == "Jackson township, Ocean County, New Jersey" | NAME == "Jefferson township, Morris County, New Jersey" | NAME == "Medford township, Burlington County, New Jersey" | NAME == "Middletown township, Monmouth County, New Jersey" | NAME == "Montclair township, Essex County, New Jersey" | NAME == "Moorestown township, Burlington County, New Jersey" | NAME == "Mount Laurel township, Burlington County, New Jersey" | NAME == "Ocean township, Monmouth County, New Jersey" | NAME == "Pennsauken township, Camden County, New Jersey" | NAME == "Plainsboro township, Middlesex County, New Jersey" | NAME == "Robbinsville township, Mercer County, New Jersey" | NAME == "South Brunswick township, Middlesex County, New Jersey" | NAME == "Teaneck township, Bergen County, New Jersey" | NAME == "Union township, Union County, New Jersey" | NAME == "Verona township, Essex County, New Jersey" | NAME == "Warren township, Somerset County, New Jersey" | NAME == "Wayne township, Passaic County, New Jersey" | NAME == "West Deptford township, Gloucester County, New Jersey" | NAME == "West Orange township, Essex County, New Jersey" | NAME == "Willingboro township, Burlington County, New Jersey")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_nj_2021 <- census_data_nj_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_nj_subdivisions_2021 <- census_data_nj_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality|township|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_nj_2021 <- bind_rows(census_data_nj_2021, census_data_nj_subdivisions_2021) %>%
filter(city != "Union" | geoid != 3474478) #Removing a Union, NJ that is a CDP
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_nj_2021 <- census_data_nj_2021 %>%
mutate(state = case_when(
state == 'New Jersey' ~ "NJ")) %>%
mutate(city = case_when(
city == 'Egg Harbor' ~ "Egg Harbor Township",
city == 'Jefferson' ~ "Jefferson Township",
city == 'Ocean' ~ "Ocean Township",
city == "Union" ~ "Union Township"
TRUE ~ city))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_nj_2021 <- census_data_nj_2021 %>%
mutate(state = case_when(
state == 'New Jersey' ~ "NJ")) %>%
mutate(city = case_when(
city == 'Egg Harbor' ~ "Egg Harbor Township",
city == 'Jefferson' ~ "Jefferson Township",
city == 'Ocean' ~ "Ocean Township",
city == "Union" ~ "Union Township",
TRUE ~ city))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_nj_complete <- distinct_hometowns_nj %>%
left_join(census_data_nj_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_nj_complete)
# Vector of all states with fewer than 50 players
states_under_50 <- football_rosters_usa_states$hometown_state_clean[football_rosters_usa_states$total_players < 50]
# Filter for the states' players
football_rosters_small_states <- football_rosters_usa %>%
filter(hometown_state_clean %in% states_under_50)
# Get a list of all the unique hometowns in the state
distinct_hometowns_small_states <- football_rosters_small_states %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_small_states_2021 <- lapply(states_under_50, function(state) {
get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = state,
output = "wide")
})
census_data_small_states_2021 <- do.call(rbind, census_data_small_states_2021)
# General cleaning of census data to prepare for join with hometowns/roster data.
census_data_small_states_2021 <- census_data_small_states_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Cleaning of census data to prepare for join with hometowns/roster data.
state_crosswalk_modified <- state_crosswalk %>%
mutate(state_names = str_to_title(state_name_caps)) %>%
mutate(state_names = case_when(
state_names == 'Washington, Dc' ~ "District of Columbia",
TRUE ~ state_names)) %>%
select(state_abb, state_names)
census_data_small_states_2021 <- census_data_small_states_2021 %>%
left_join(state_crosswalk_modified, by = c("state" = "state_names")) %>%
mutate(state = census_data_small_states_2021$state_abb) %>%
mutate(city = case_when(
city == 'Boise City' ~ "Boise",
TRUE ~ city))
census_data_small_states_2021 <- census_data_small_states_2021 %>%
rename(state = state_abb)
# Join the census data to the list of hometowns.
hometowns_small_states_complete <- distinct_hometowns_small_states %>%
left_join(census_data_small_states_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Now we have to figure out how to address each of the NA values.
# For Ona, WV, the zip code (25545) seems to be a good substitute: https://censusreporter.org/profiles/86000US25545-25545/
census_data_ona_wv_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 25545") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "WV") %>%
mutate(city = case_when(
city == "ZCTA5 25545" ~ "Ona")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_small_states_2021 <- bind_rows(census_data_small_states_2021, census_data_ona_wv_2021)
hometowns_small_states_complete <- distinct_hometowns_small_states %>%
left_join(census_data_small_states_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_small_states_complete)
# It turns out that many towns in Connecticut, New Hampshire, and Rhode Island are county subdivisions, so we will grab the relevant ones of those, too
census_data_small_states_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = c("CT", "NH", "RI"),
output = "wide")
View(census_data_small_states_subdivisions_2021)
# Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_small_states_2021 <- lapply(states_under_50, function(state) {
get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = state,
output = "wide")
})
census_data_small_states_2021 <- do.call(rbind, census_data_small_states_2021)
# It turns out that many towns in Connecticut, New Hampshire, and Rhode Island are county subdivisions, so we will grab the relevant ones of those, too
census_data_small_states_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = c("CT", "NH", "RI"),
output = "wide") %>%
filter(NAME == "Darien town, Fairfield County, Connecticut" | NAME == "East Greenwich town, Kent County, Rhode Island" | NAME == "Fairfield town, Fairfield County, Connecticut" | NAME == "Glastonbury town, Hartford County, Connecticut" | NAME == "Grantham town, Sullivan County, New Hampshire" | NAME == "Hollis town, Hillsborough County, New Hampshire" | NAME == "Kent town, Litchfield County, Connecticut" | NAME == "New Fairfield town, Fairfield County, Connecticut" | NAME == "Pomfret town, Windham County, Connecticut" | NAME == "Rocky Hill town, Hartford County, Connecticut" | NAME == "Suffield town, Hartford County, Connecticut" | NAME == "Trumbull town, Fairfield County, Connecticut" | NAME == "Wallingford town, New Haven County, Connecticut" | NAME == "West Warwick town, Kent County, Rhode Island" | NAME == "Westport town, Fairfield County, Connecticut" | NAME == "Wilton town, Fairfield County, Connecticut" | NAME == "Windsor town, Hartford County, Connecticut")
View(census_data_small_states_subdivisions_2021)
# General cleaning of census data to prepare for join with hometowns/roster data.
census_data_small_states_2021 <- census_data_small_states_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_small_states_subdivisions_2021 <- census_data_small_states_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_small_states_2021 <- bind_rows(census_data_small_states_2021, census_data_small_states_subdivisions_2021)
# Cleaning of census data to prepare for join with hometowns/roster data.
state_crosswalk_modified <- state_crosswalk %>%
mutate(state_names = str_to_title(state_name_caps)) %>%
mutate(state_names = case_when(
state_names == 'Washington, Dc' ~ "District of Columbia",
TRUE ~ state_names)) %>%
select(state_abb, state_names)
census_data_small_states_2021 <- census_data_small_states_2021 %>%
left_join(state_crosswalk_modified, by = c("state" = "state_names")) %>%
mutate(state = census_data_small_states_2021$state_abb) %>%
mutate(city = case_when(
city == 'Boise City' ~ "Boise",
TRUE ~ city))
census_data_small_states_2021 <- census_data_small_states_2021 %>%
rename(state = state_abb)
# Join the census data to the list of hometowns.
hometowns_small_states_complete <- distinct_hometowns_small_states %>%
left_join(census_data_small_states_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Now we have to figure out how to address each of the NA values.
# For Ona, WV, the zip code (25545) seems to be a good substitute: https://censusreporter.org/profiles/86000US25545-25545/
census_data_ona_wv_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 25545") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "WV") %>%
mutate(city = case_when(
city == "ZCTA5 25545" ~ "Ona")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_small_states_2021 <- bind_rows(census_data_small_states_2021, census_data_ona_wv_2021)
hometowns_small_states_complete <- distinct_hometowns_small_states %>%
left_join(census_data_small_states_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_small_states_complete)
