=======
filter(name == "Block Group 3, Census Tract 65.01, Knox County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 3, Census Tract 65.01, Knox County, Tennessee" ~ "Corryton")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Eads, TN this block group seems like a good substitute:
# https://censusreporter.org/profiles/15000US471570210231-bg-1-tract-21023-shelby-tn/
census_data_eads_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 1, Census Tract 210.23, Shelby County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 1, Census Tract 210.23, Shelby County, Tennessee" ~ "Eads")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Hermitage, Tennesse this block group seems like a good substitute:
# https://censusreporter.org/profiles/15000US470370154021-bg-1-tract-15402-davidson-tn/
census_data_hermitage_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 1, Census Tract 154.02, Davidson County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 1, Census Tract 154.02, Davidson County, Tennessee" ~ "Hermitage")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_tn_2021 <- bind_rows(census_data_tn_2021, census_data_antioch_tn_2021, census_data_corryton_tn_2021, census_data_hermitage_tn_2021, census_data_eads_tn_2021)
hometowns_tn_complete <- distinct_hometowns_tn %>%
left_join(census_data_tn_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_or_complete, file = "hometowns_hi.csv")
View(hometowns_tn_complete)
>>>>>>> Stashed changes
library(tidyverse)
hometowns_ga_complete
football_rosters_ga
football_rosters_ga %>%
filter(hometown == "Buford, GA")
football_rosters_ga %>%
filter(high_school == "Buford")
football_rosters_ga %>%
select(school, name, position, class, hometown, high_school )
filter(high_school == "Buford") %>%
football_rosters_ga %>%
select(school, name, position, class, hometown, high_school) %>%
filter(high_school == "Buford")
Buford<-football_rosters_ga %>%
select(school, name, position, class, hometown, high_school) %>%
filter(high_school == "Buford")
View(Buford)
View(hometowns_ga_complete)
View(football_rosters_ga)
Buford<-football_rosters_ga %>%
select(school, name, position, class, hometown, high_school) %>%
filter(hometown == "Buford")
Buford<-football_rosters_ga %>%
select(school, name, position, class, hometown, high_school) %>%
filter(hometown == "Buford, GA")
View(Buford)
Buford<-football_rosters_ga %>%
select(school, name, position, class, hometown, high_school) %>%
filter(hometown == "Buford, GA")
#libraries
library(tidyverse)
library(googlesheets4)
library(janitor)
library(tidycensus)
#install.packages("googlesheets4")
#Authenticating with Google account
#gs4_auth()
# Load Census API key
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
# Load ACS crosswalk
acs_2021 <- load_variables(2021, "acs5")
# Load 2020 Census crosswalk
census_2020 <- load_variables(2020, "pl", cache = TRUE)
# Helpful references for using ACS and Census APIs: #https://censusreporter.org/topics/table-codes/
#https://walker-data.com/tidycensus/articles/basic-usage.html
#Load football roster scraper. Also did some cleaning for special cases here. For the players who were missing hometown information, this was obtained by looking at rosters from previous years.
football_rosters <- read_csv("football_roster.csv") %>%
clean_names() %>%
mutate(hometown = case_when(
hometown == "Pompano, Beach, Fla." ~ "Pompano Beach, Fla.",
hometown == "Livemore Calif." ~ "Livemore, Calif.",
hometown == "Washington D.C." ~ "Washington, D.C.",
hometown == "Tampa. Fla." ~ "Tampa, Fla.",
hometown == "Upper Marlboro. Md." ~ "Upper Marlboro, Md.",
hometown == "Norfolk,Va." ~ "Norfolk, Va.",
hometown == "Bronx N.Y." ~ "Bronx, N.Y.",
hometown == "Cocoa Fla." ~ "Cocoa, Fla.",
hometown == "Jefferson" ~ "Jefferson Township, NJ",
hometown == "Melbourne" ~ "Melbourne, FL",
hometown == "Chicago" ~ "Chicago, IL",
hometown == "Cincinnati" ~ "Cincinnati, OH",
hometown == "Cleveland" ~ "Cleveland, OH",
hometown == "St. Louis" ~ "St. Louis, MO",
hometown == "Inglewood" ~ "Inglewood, CA",
hometown == "Chatworth, Ga." ~ "Chatsworth, Ga.",
hometown == "Kingland, Ga." ~ "Kingsland, Ga.",
hometown == "East Cobb, GA" ~ "Marietta, GA",
hometown == "Platville, Ala." ~ "Prattville, Ala.",
TRUE ~ hometown)) %>%
mutate(hometown = case_when(
name == "Feyisayo Oluleye" ~ "Lancaster, PA",
name == "Kyle Vaccarella" ~ "Fairfield, CT",
TRUE ~ hometown))
#Let's also use this as a time to load a state crosswalk we'll use later
state_crosswalk <- read_csv("state_crosswalk.csv") %>%
mutate(state_name_caps = str_to_upper(state_name)) %>%
select(state_abb, state_name_caps)
#Let's load some hometowns that we passed through and cleaned with Open Refine
hometowns_open_refine <- read_csv("hometowns_open_refine.csv")
#Checking to see that we have 68 schools and the player counts for each school
# school_check <- football_rosters %>%
#   group_by(school) %>%
#   summarise(total_players = n()) %>%
#   arrange(total_players)
#Checking to make sure there are no duplicate players
# player_check <- football_rosters %>%
#   group_by(name, school) %>%
#   summarise(total = n()) %>%
#   arrange(desc(total))
#CLEANING/STANDARDIZING STATE
#Splitting the hometown column so we can work with the state
football_rosters <- football_rosters %>%
mutate(hometown_cleaning = hometown) %>%
separate(hometown_cleaning, into = c("hometown_city", "hometown_state", "hometown_country"), sep = ", ")
#What kind of values are we getting in hometown_state?
state_check <- football_rosters %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Many of those aren't U.S. states. Let's make a new dataframe that only has players from the 50 states:
excluded_states <- c(" Western Australia", "Alberta", "American Samoa", "Australia", "Bahamas", "Belgium", "Canada", "China", "Colombia", "Congo", "County Kerry", "Denmark", "DR of the Congo", "England", "Finland", "France", "Gabon", "Germany", "Ghana", "Ireland", "Japan", "Manitoba", "Mexico", "N.S.", "New South Wales", "New Zealand", "Nigeria", "NSW", "Ont.", "Ontario", "QC", "Que.", "Quebec", "QuÃ©bec", "Queensland", "Saskatchewan", "Serbia", "South Africa", "South Australia", "Sweden", "Switzerland", "The Netherlands", "Tonga", "United Kingdom", "Victoria", "Victoria AU", "Western Samoa")
football_rosters_usa <- football_rosters %>%
filter(!(hometown_state %in% excluded_states) | is.na(hometown_state)) %>%
mutate(hometown_state = case_when(
hometown_state == "Maui" ~ "HI",
hometown_state == "New York City" ~ "NY",
TRUE ~ hometown_state))
#And now let's recheck those hometown_state values:
state_check_usa <- football_rosters_usa %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Let's standardize these to the state postal abbreviation:
#First, let's try removing punctuation and making everything upper case:
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_first_try = str_to_upper(gsub("[[:punct:]]", "", hometown_state)))
#Second, let's see if we can use our crosswalk:
football_rosters_usa <- football_rosters_usa %>%
left_join(state_crosswalk, by=c("hometown_state_first_try" = "state_name_caps"))
football_rosters_usa <- football_rosters_usa %>%
rename(hometown_state_second_try = state_abb)
#Third, let's combine the results of our first two tries and check to see how much that reduced our unique values
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_third_try = ifelse(is.na(hometown_state_second_try), hometown_state_first_try, hometown_state_second_try))
state_check_usa_update <- football_rosters_usa %>%
group_by(hometown_state_third_try) %>%
summarise(total = n()) %>%
arrange(hometown_state_third_try)
#Now we're down to much fewer state values. Let's manually take care of the rest.
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_clean = case_when(
hometown_state_third_try == "ALA" ~ "AL",
hometown_state_third_try == "ARIZ" ~ "AZ",
hometown_state_third_try == "ARK" ~ "AR",
hometown_state_third_try == "CALF" | hometown_state_third_try == "CALIF" ~ "CA",
hometown_state_third_try == "COL" | hometown_state_third_try == "COLO" ~ "CO",
hometown_state_third_try == "CONN" ~ "CT",
hometown_state_third_try == "DEL" ~ "DE",
hometown_state_third_try == "FLA" ~ "FL",
hometown_state_third_try == "ILL" ~ "IL",
hometown_state_third_try == "IND" ~ "IN",
hometown_state_third_try == "KAN" ~ "KS",
hometown_state_third_try == "MASS" ~ "MA",
hometown_state_third_try == "MICH" ~ "MI",
hometown_state_third_try == "MINN" ~ "MN",
hometown_state_third_try == "MISS" ~ "MS",
hometown_state_third_try == "MONT" ~ "MT",
hometown_state_third_try == "NEB" ~ "NE",
hometown_state_third_try == "NEV" ~ "NV",
hometown_state_third_try == "OKLA" ~ "OK",
hometown_state_third_try == "ORE" ~ "OR",
hometown_state_third_try == "PENN" ~ "PA",
hometown_state_third_try == "TENN" ~ "TN",
hometown_state_third_try == "W VA" | hometown_state_third_try == "WVA" ~ "WV",
hometown_state_third_try == "WASH" ~ "WA",
hometown_state_third_try == "WIS" | hometown_state_third_try == "WISC" ~ "WI",
hometown_state_third_try == "WYO" ~ "WY",
TRUE ~ hometown_state_third_try))
#What's the final state breakdown?
football_rosters_usa_states <- football_rosters_usa %>%
group_by(hometown_state_clean) %>%
summarise(total_players=n()) %>%
arrange(desc(total_players))
#STATES WITH POPULATION DATA
#Let's try to add in some population data and try to figure out the number of Power 5 football players per 100,000 residents in a state
#First, let's get ourselves a dataframe that has state postal abbreviations and their most recent ACS state population:
state_pops_2021 <- get_acs(geography = "state",
variables = "B01003_001",
year = 2021)
state_pops_2021 <- state_pops_2021 %>%
clean_names() %>%
mutate(name_caps = str_to_upper(name)) %>%
mutate(name_caps = case_when(
name_caps == "DISTRICT OF COLUMBIA" ~ "WASHINGTON, DC",
TRUE ~ name_caps
)) %>%
left_join(state_crosswalk, by=c("name_caps" = "state_name_caps"))
state_pops_2021 <- state_pops_2021 %>%
select(state_abb, estimate) %>%
filter(!is.na(state_abb)) #Removed NA value, which was Puerto Rico
# Now, let's join our population data to our state count of football players data:
football_rosters_usa_states <- football_rosters_usa_states %>%
inner_join(state_pops_2021, by=c("hometown_state_clean" = "state_abb"))
football_rosters_usa_states <- football_rosters_usa_states %>%
rename(total_pop = estimate)
football_rosters_usa_states <- football_rosters_usa_states %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/total_pop,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(football_rosters_usa_states, file = "state_counts.csv")
# MISSISSIPPI HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ms <- football_rosters_usa %>%
filter(hometown_state_clean == "MS")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ms <- football_rosters_ms %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 1: Filter for the state's players
football_rosters_ms <- football_rosters_usa %>%
filter(hometown_state_clean == "MS")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ms <- football_rosters_ms %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
View(distinct_hometowns_ms)
View(census_data_ms_2021)
View(distinct_hometowns_la)
View(football_rosters_ms)
View(census_data_la_2021)
View(census_data_ar_2021)
View(distinct_hometowns_al)
View(distinct_hometowns_ar)
View(distinct_hometowns_ms)
View(census_data_ms_2021)
View(census_data_nc_2021)
View(distinct_hometowns_nc)
View(distinct_hometowns_sc)
View(census_data_sc_2021)
View(census_data_tn_2021)
View(football_rosters_tn)
View(hometowns_tn_complete)
View(distinct_hometowns_tn)
View(distinct_hometowns_tx)
View(census_data_tx_2021)
View(census_data_tx_2021)
View(census_data_al_2021)
View(distinct_hometowns_al)
View(distinct_hometowns_ky)
View(distinct_hometowns_ok)
View(census_data_ok_2021)
View(distinct_hometowns_tn)
View(census_data_va_2021)
View(football_rosters_va)
View(distinct_hometowns_va)
View(football_rosters_tn)
View(census_data_tn_2021)
View(distinct_hometowns_tn)
View(distinct_hometowns_small_states)
View(distinct_hometowns_in)
View(distinct_hometowns_in)
View(census_data_in_2021)
View(census_data_ne_2021)
View(distinct_hometowns_ne)
View(distinct_hometowns_la)
View(census_data_la_2021)
View(census_data_md_2021)
View(football_rosters_md)
View(distinct_hometowns_md)
View(distinct_hometowns_sc)
View(distinct_hometowns_fl)
View(distinct_hometowns_az)
View(distinct_hometowns_nc)
View(census_data_nc_2021)
View(census_data_wa_2021)
View(census_data_oh_2021)
View(distinct_hometowns_oh)
View(census_data_small_states_2021)
View(distinct_hometowns_small_states)
View(football_rosters_ia)
View(hometowns_ia_complete)
View(football_rosters_ia)
View(distinct_hometowns_ia)
View(census_data_ia_2021)
View(distinct_hometowns_ia)
View(distinct_hometowns_wi)
View(distinct_hometowns_mi)
View(census_data_mi_2021)
View(census_data_ny_2021)
View(distinct_hometowns_ny)
View(distinct_hometowns_ks)
View(census_data_ks_2021)
View(football_rosters_ma)
View(football_rosters_ky)
View(census_data_ky_2021)
View(distinct_hometowns_ky)
View(distinct_hometowns_or)
View(distinct_hometowns_tx)
View(census_data_tx_2021)
View(census_data_mn_2021)
View(football_rosters_mn)
View(distinct_hometowns_mn)
View(football_rosters_wa)
View(hometowns_nc_complete)
View(census_data_nc_2021)
View(distinct_hometowns_nc)
View(distinct_hometowns_mn)
View(distinct_hometowns_fl)
View(census_data_nc_2021)
View(census_data_fl_2021)
# GEORGIA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ga <- football_rosters_usa %>%
filter(hometown_state_clean == "GA")
#libraries
library(tidyverse)
library(googlesheets4)
library(janitor)
library(tidycensus)
#install.packages("googlesheets4")
#Authenticating with Google account
#gs4_auth()
# Load Census API key
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
# Load ACS crosswalk
acs_2021 <- load_variables(2021, "acs5")
# Load 2020 Census crosswalk
census_2020 <- load_variables(2020, "pl", cache = TRUE)
# Helpful references for using ACS and Census APIs: #https://censusreporter.org/topics/table-codes/
#https://walker-data.com/tidycensus/articles/basic-usage.html
#Load football roster scraper. Also did some cleaning for special cases here. For the players who were missing hometown information, this was obtained by looking at rosters from previous years.
football_rosters <- read_csv("football_roster.csv") %>%
clean_names() %>%
mutate(hometown = case_when(
hometown == "Pompano, Beach, Fla." ~ "Pompano Beach, Fla.",
hometown == "Livemore Calif." ~ "Livemore, Calif.",
hometown == "Washington D.C." ~ "Washington, D.C.",
hometown == "Tampa. Fla." ~ "Tampa, Fla.",
hometown == "Upper Marlboro. Md." ~ "Upper Marlboro, Md.",
hometown == "Norfolk,Va." ~ "Norfolk, Va.",
hometown == "Bronx N.Y." ~ "Bronx, N.Y.",
hometown == "Cocoa Fla." ~ "Cocoa, Fla.",
hometown == "Jefferson" ~ "Jefferson Township, NJ",
hometown == "Melbourne" ~ "Melbourne, FL",
hometown == "Chicago" ~ "Chicago, IL",
hometown == "Cincinnati" ~ "Cincinnati, OH",
hometown == "Cleveland" ~ "Cleveland, OH",
hometown == "St. Louis" ~ "St. Louis, MO",
hometown == "Inglewood" ~ "Inglewood, CA",
hometown == "Chatworth, Ga." ~ "Chatsworth, Ga.",
hometown == "Kingland, Ga." ~ "Kingsland, Ga.",
hometown == "East Cobb, GA" ~ "Marietta, GA",
hometown == "Platville, Ala." ~ "Prattville, Ala.",
TRUE ~ hometown)) %>%
mutate(hometown = case_when(
name == "Feyisayo Oluleye" ~ "Lancaster, PA",
name == "Kyle Vaccarella" ~ "Fairfield, CT",
TRUE ~ hometown))
#Let's also use this as a time to load a state crosswalk we'll use later
state_crosswalk <- read_csv("state_crosswalk.csv") %>%
mutate(state_name_caps = str_to_upper(state_name)) %>%
select(state_abb, state_name_caps)
#Let's load some hometowns that we passed through and cleaned with Open Refine
hometowns_open_refine <- read_csv("hometowns_open_refine.csv")
#Checking to see that we have 68 schools and the player counts for each school
# school_check <- football_rosters %>%
#   group_by(school) %>%
#   summarise(total_players = n()) %>%
#   arrange(total_players)
#Checking to make sure there are no duplicate players
# player_check <- football_rosters %>%
#   group_by(name, school) %>%
#   summarise(total = n()) %>%
#   arrange(desc(total))
#CLEANING/STANDARDIZING STATE
#Splitting the hometown column so we can work with the state
football_rosters <- football_rosters %>%
mutate(hometown_cleaning = hometown) %>%
separate(hometown_cleaning, into = c("hometown_city", "hometown_state", "hometown_country"), sep = ", ")
#What kind of values are we getting in hometown_state?
state_check <- football_rosters %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Many of those aren't U.S. states. Let's make a new dataframe that only has players from the 50 states:
excluded_states <- c(" Western Australia", "Alberta", "American Samoa", "Australia", "Bahamas", "Belgium", "Canada", "China", "Colombia", "Congo", "County Kerry", "Denmark", "DR of the Congo", "England", "Finland", "France", "Gabon", "Germany", "Ghana", "Ireland", "Japan", "Manitoba", "Mexico", "N.S.", "New South Wales", "New Zealand", "Nigeria", "NSW", "Ont.", "Ontario", "QC", "Que.", "Quebec", "QuÃ©bec", "Queensland", "Saskatchewan", "Serbia", "South Africa", "South Australia", "Sweden", "Switzerland", "The Netherlands", "Tonga", "United Kingdom", "Victoria", "Victoria AU", "Western Samoa")
football_rosters_usa <- football_rosters %>%
filter(!(hometown_state %in% excluded_states) | is.na(hometown_state)) %>%
mutate(hometown_state = case_when(
hometown_state == "Maui" ~ "HI",
hometown_state == "New York City" ~ "NY",
TRUE ~ hometown_state))
#And now let's recheck those hometown_state values:
state_check_usa <- football_rosters_usa %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Let's standardize these to the state postal abbreviation:
#First, let's try removing punctuation and making everything upper case:
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_first_try = str_to_upper(gsub("[[:punct:]]", "", hometown_state)))
#Second, let's see if we can use our crosswalk:
football_rosters_usa <- football_rosters_usa %>%
left_join(state_crosswalk, by=c("hometown_state_first_try" = "state_name_caps"))
football_rosters_usa <- football_rosters_usa %>%
rename(hometown_state_second_try = state_abb)
#Third, let's combine the results of our first two tries and check to see how much that reduced our unique values
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_third_try = ifelse(is.na(hometown_state_second_try), hometown_state_first_try, hometown_state_second_try))
state_check_usa_update <- football_rosters_usa %>%
group_by(hometown_state_third_try) %>%
summarise(total = n()) %>%
arrange(hometown_state_third_try)
#Now we're down to much fewer state values. Let's manually take care of the rest.
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_clean = case_when(
hometown_state_third_try == "ALA" ~ "AL",
hometown_state_third_try == "ARIZ" ~ "AZ",
hometown_state_third_try == "ARK" ~ "AR",
hometown_state_third_try == "CALF" | hometown_state_third_try == "CALIF" ~ "CA",
hometown_state_third_try == "COL" | hometown_state_third_try == "COLO" ~ "CO",
hometown_state_third_try == "CONN" ~ "CT",
hometown_state_third_try == "DEL" ~ "DE",
hometown_state_third_try == "FLA" ~ "FL",
hometown_state_third_try == "ILL" ~ "IL",
hometown_state_third_try == "IND" ~ "IN",
hometown_state_third_try == "KAN" ~ "KS",
hometown_state_third_try == "MASS" ~ "MA",
hometown_state_third_try == "MICH" ~ "MI",
hometown_state_third_try == "MINN" ~ "MN",
hometown_state_third_try == "MISS" ~ "MS",
hometown_state_third_try == "MONT" ~ "MT",
hometown_state_third_try == "NEB" ~ "NE",
hometown_state_third_try == "NEV" ~ "NV",
hometown_state_third_try == "OKLA" ~ "OK",
hometown_state_third_try == "ORE" ~ "OR",
hometown_state_third_try == "PENN" ~ "PA",
hometown_state_third_try == "TENN" ~ "TN",
hometown_state_third_try == "W VA" | hometown_state_third_try == "WVA" ~ "WV",
hometown_state_third_try == "WASH" ~ "WA",
hometown_state_third_try == "WIS" | hometown_state_third_try == "WISC" ~ "WI",
hometown_state_third_try == "WYO" ~ "WY",
TRUE ~ hometown_state_third_try))
#What's the final state breakdown?
football_rosters_usa_states <- football_rosters_usa %>%
group_by(hometown_state_clean) %>%
summarise(total_players=n()) %>%
arrange(desc(total_players))
View(hometowns_ga_complete)
View(distinct_hometowns_ut)
View(distinct_hometowns_ga)
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross"  hometown_city_clean == "Dacula")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross" | hometown_city_clean == "Dacula")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross" | hometown_city_clean == "Dacula"|  hometown_city_clean == "Suwanne")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross" | hometown_city_clean == "Dacula"|  hometown_city_clean == "Suwanee")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross" | hometown_city_clean == "Dacula"|  hometown_city_clean == "Suwanee" | hometown_city_clean == "Sugar Hill")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross" | hometown_city_clean == "Dacula"|  hometown_city_clean == "Suwanee" | hometown_city_clean == "Sugar Hill" | hometown_city_clean == "Berekely Lake")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross" | hometown_city_clean == "Dacula"|  hometown_city_clean == "Suwanee" | hometown_city_clean == "Sugar Hill" | hometown_city_clean == "Berekley Lake")
distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross" | hometown_city_clean == "Dacula"|  hometown_city_clean == "Suwanee" | hometown_city_clean == "Sugar Hill" | hometown_city_clean == "Berkeley Lake")
Gwinnett_County_GA <- distinct_hometowns_ga %>%
filter(hometown_city_clean == "Buford" | hometown_city_clean == "Sugar Hill" |  hometown_city_clean == "Lawrenceville" |  hometown_city_clean == "Duluth" |  hometown_city_clean == "Lilburn" |  hometown_city_clean == "Grayson" |  hometown_city_clean == "Norcross" | hometown_city_clean == "Dacula"|  hometown_city_clean == "Suwanee" | hometown_city_clean == "Sugar Hill")
View(Gwinnett_County_GA)
