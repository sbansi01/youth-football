football_rosters_usa_states <- football_rosters_usa_states %>%
inner_join(state_pops_2021, by=c("hometown_state_clean" = "state_abb"))
football_rosters_usa_states <- football_rosters_usa_states %>%
rename(total_pop = estimate)
football_rosters_usa_states <- football_rosters_usa_states %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/total_pop,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(football_rosters_usa_states, file = "state_counts.csv")
# START TO CLEAN/STANDARDIZE HOMETOWNS
# CSV - going to try cleaning this through Open Refine
#write_csv(distinct_hometowns, file = "hometowns_to_clean.csv")
#Join our Open Refine dataframe to our dataframe of Power Five players
hometowns_open_refine_modified <- hometowns_open_refine %>%
select(hometown_city, hometown_city_clean, hometown_state_clean)
football_rosters_usa <- football_rosters_usa %>%
left_join(hometowns_open_refine_modified, by = c("hometown_city", "hometown_state_clean")) %>%
mutate(hometown_city_clean = case_when(
name == 'DJ Uiagalelei' ~ "Riverside",
name == 'AJ Duffy' ~ "Moreno Valley",
TRUE ~ hometown_city_clean)) #These lines of code are for two players from Inland Empire, California, a large region of California that includes dozens of incorporated cities
distinct_hometowns <- football_rosters_usa %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total = n())
#From here, the best way to continue working on this will likely be state-by-state
# Step 1: Filter for the state's players
football_rosters_wi <- football_rosters_usa %>%
filter(hometown_state_clean == "WI")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_wi <- football_rosters_wi %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_wi_2021 <- census_data_wi_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_wi_2021 <- census_data_wi_2021 %>%
mutate(state = case_when(
state == 'Wisconsin' ~ "WI"))
View(football_rosters_wi)
View(distinct_hometowns_wi)
View(census_data_wi_2021)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_wi_complete)
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
View(census_data_wi_2021)
# Step 1: Filter for the state's players
football_rosters_wi <- football_rosters_usa %>%
filter(hometown_state_clean == "WI")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_wi <- football_rosters_wi %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
filter(NAME == "Erin town, Washington County, Wisconsin" | NAME == "Gardner town, Door County, Wisconsin")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_wi_2021 <- census_data_wi_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_wi_subdivisions_2021 <- census_data_wi_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality|township|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_subdivisions_2021)
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_wi_2021 <- census_data_wi_2021 %>%
mutate(state = case_when(
state == 'Wisconsin' ~ "WI"))
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
filter(NAME == "Erin town, Washington County, Wisconsin" | NAME == "Gardner town, Door County, Wisconsin")
ensus_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
View(census_data_wi_subdivisions_2021)
census_data__wi_blocks_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
View(census_data__wi_blocks_2021)
View(census_data_wi_2021)
#Load football roster scraper. Also did some cleaning for special cases here. For the players who were missing hometown information, this was obtained by looking at rosters from previous years.
football_rosters <- read_csv("football_roster.csv") %>%
clean_names() %>%
mutate(hometown = case_when(
hometown == "Pompano, Beach, Fla." ~ "Pompano Beach, Fla.",
hometown == "Livemore Calif." ~ "Livemore, Calif.",
hometown == "Washington D.C." ~ "Washington, D.C.",
hometown == "Tampa. Fla." ~ "Tampa, Fla.",
hometown == "Upper Marlboro. Md." ~ "Upper Marlboro, Md.",
hometown == "Norfolk,Va." ~ "Norfolk, Va.",
hometown == "Bronx N.Y." ~ "Bronx, N.Y.",
hometown == "Cocoa Fla." ~ "Cocoa, Fla.",
hometown == "Jefferson" ~ "Jefferson Township, NJ",
hometown == "Melbourne" ~ "Melbourne, FL",
hometown == "Chicago" ~ "Chicago, IL",
hometown == "Cincinnati" ~ "Cincinnati, OH",
hometown == "Cleveland" ~ "Cleveland, OH",
hometown == "St. Louis" ~ "St. Louis, MO",
hometown == "Inglewood" ~ "Inglewood, CA",
hometown == "Chatworth, Ga." ~ "Chatsworth, Ga.",
hometown == "Kingland, Ga." ~ "Kingsland, Ga.",
hometown == "East Cobb, GA" ~ "Marietta, GA",
hometown == "Platville, Ala." ~ "Prattville, Ala.",
TRUE ~ hometown)) %>%
mutate(hometown = case_when(
name == "Feyisayo Oluleye" ~ "Lancaster, PA",
name == "Kyle Vaccarella" ~ "Fairfield, CT",
TRUE ~ hometown))
#Let's also use this as a time to load a state crosswalk we'll use later
state_crosswalk <- read_csv("state_crosswalk.csv") %>%
mutate(state_name_caps = str_to_upper(state_name)) %>%
select(state_abb, state_name_caps)
#Let's load some hometowns that we passed through and cleaned with Open Refine
hometowns_open_refine <- read_csv("hometowns_open_refine.csv")
#Checking to see that we have 68 schools and the player counts for each school
# school_check <- football_rosters %>%
#   group_by(school) %>%
#   summarise(total_players = n()) %>%
#   arrange(total_players)
#Checking to make sure there are no duplicate players
# player_check <- football_rosters %>%
#   group_by(name, school) %>%
#   summarise(total = n()) %>%
#   arrange(desc(total))
#CLEANING/STANDARDIZING STATE
#Splitting the hometown column so we can work with the state
football_rosters <- football_rosters %>%
mutate(hometown_cleaning = hometown) %>%
separate(hometown_cleaning, into = c("hometown_city", "hometown_state", "hometown_country"), sep = ", ")
#What kind of values are we getting in hometown_state?
state_check <- football_rosters %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Many of those aren't U.S. states. Let's make a new dataframe that only has players from the 50 states:
excluded_states <- c(" Western Australia", "Alberta", "American Samoa", "Australia", "Bahamas", "Belgium", "Canada", "China", "Colombia", "Congo", "County Kerry", "Denmark", "DR of the Congo", "England", "Finland", "France", "Gabon", "Germany", "Ghana", "Ireland", "Japan", "Manitoba", "Mexico", "N.S.", "New South Wales", "New Zealand", "Nigeria", "NSW", "Ont.", "Ontario", "QC", "Que.", "Quebec", "Québec", "Queensland", "Saskatchewan", "Serbia", "South Africa", "South Australia", "Sweden", "Switzerland", "The Netherlands", "Tonga", "United Kingdom", "Victoria", "Victoria AU", "Western Samoa")
football_rosters_usa <- football_rosters %>%
filter(!(hometown_state %in% excluded_states) | is.na(hometown_state)) %>%
mutate(hometown_state = case_when(
hometown_state == "Maui" ~ "HI",
hometown_state == "New York City" ~ "NY",
TRUE ~ hometown_state))
#And now let's recheck those hometown_state values:
state_check_usa <- football_rosters_usa %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Let's standardize these to the state postal abbreviation:
#First, let's try removing punctuation and making everything upper case:
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_first_try = str_to_upper(gsub("[[:punct:]]", "", hometown_state)))
#Second, let's see if we can use our crosswalk:
football_rosters_usa <- football_rosters_usa %>%
left_join(state_crosswalk, by=c("hometown_state_first_try" = "state_name_caps"))
football_rosters_usa <- football_rosters_usa %>%
rename(hometown_state_second_try = state_abb)
#Third, let's combine the results of our first two tries and check to see how much that reduced our unique values
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_third_try = ifelse(is.na(hometown_state_second_try), hometown_state_first_try, hometown_state_second_try))
state_check_usa_update <- football_rosters_usa %>%
group_by(hometown_state_third_try) %>%
summarise(total = n()) %>%
arrange(hometown_state_third_try)
#Now we're down to much fewer state values. Let's manually take care of the rest.
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_clean = case_when(
hometown_state_third_try == "ALA" ~ "AL",
hometown_state_third_try == "ARIZ" ~ "AZ",
hometown_state_third_try == "ARK" ~ "AR",
hometown_state_third_try == "CALF" | hometown_state_third_try == "CALIF" ~ "CA",
hometown_state_third_try == "COL" | hometown_state_third_try == "COLO" ~ "CO",
hometown_state_third_try == "CONN" ~ "CT",
hometown_state_third_try == "DEL" ~ "DE",
hometown_state_third_try == "FLA" ~ "FL",
hometown_state_third_try == "ILL" ~ "IL",
hometown_state_third_try == "IND" ~ "IN",
hometown_state_third_try == "KAN" ~ "KS",
hometown_state_third_try == "MASS" ~ "MA",
hometown_state_third_try == "MICH" ~ "MI",
hometown_state_third_try == "MINN" ~ "MN",
hometown_state_third_try == "MISS" ~ "MS",
hometown_state_third_try == "MONT" ~ "MT",
hometown_state_third_try == "NEB" ~ "NE",
hometown_state_third_try == "NEV" ~ "NV",
hometown_state_third_try == "OKLA" ~ "OK",
hometown_state_third_try == "ORE" ~ "OR",
hometown_state_third_try == "PENN" ~ "PA",
hometown_state_third_try == "TENN" ~ "TN",
hometown_state_third_try == "W VA" | hometown_state_third_try == "WVA" ~ "WV",
hometown_state_third_try == "WASH" ~ "WA",
hometown_state_third_try == "WIS" | hometown_state_third_try == "WISC" ~ "WI",
hometown_state_third_try == "WYO" ~ "WY",
TRUE ~ hometown_state_third_try))
#What's the final state breakdown?
football_rosters_usa_states <- football_rosters_usa %>%
group_by(hometown_state_clean) %>%
summarise(total_players=n()) %>%
arrange(desc(total_players))
#STATES WITH POPULATION DATA
#Let's try to add in some population data and try to figure out the number of Power 5 football players per 100,000 residents in a state
#First, let's get ourselves a dataframe that has state postal abbreviations and their most recent ACS state population:
state_pops_2021 <- get_acs(geography = "state",
variables = "B01003_001",
year = 2021)
state_pops_2021 <- state_pops_2021 %>%
clean_names() %>%
mutate(name_caps = str_to_upper(name)) %>%
mutate(name_caps = case_when(
name_caps == "DISTRICT OF COLUMBIA" ~ "WASHINGTON, DC",
TRUE ~ name_caps
)) %>%
left_join(state_crosswalk, by=c("name_caps" = "state_name_caps"))
state_pops_2021 <- state_pops_2021 %>%
select(state_abb, estimate) %>%
filter(!is.na(state_abb)) #Removed NA value, which was Puerto Rico
# Now, let's join our population data to our state count of football players data:
football_rosters_usa_states <- football_rosters_usa_states %>%
inner_join(state_pops_2021, by=c("hometown_state_clean" = "state_abb"))
football_rosters_usa_states <- football_rosters_usa_states %>%
rename(total_pop = estimate)
football_rosters_usa_states <- football_rosters_usa_states %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/total_pop,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(football_rosters_usa_states, file = "state_counts.csv")
# START TO CLEAN/STANDARDIZE HOMETOWNS
# CSV - going to try cleaning this through Open Refine
#write_csv(distinct_hometowns, file = "hometowns_to_clean.csv")
#Join our Open Refine dataframe to our dataframe of Power Five players
hometowns_open_refine_modified <- hometowns_open_refine %>%
select(hometown_city, hometown_city_clean, hometown_state_clean)
football_rosters_usa <- football_rosters_usa %>%
left_join(hometowns_open_refine_modified, by = c("hometown_city", "hometown_state_clean")) %>%
mutate(hometown_city_clean = case_when(
name == 'DJ Uiagalelei' ~ "Riverside",
name == 'AJ Duffy' ~ "Moreno Valley",
TRUE ~ hometown_city_clean)) #These lines of code are for two players from Inland Empire, California, a large region of California that includes dozens of incorporated cities
distinct_hometowns <- football_rosters_usa %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total = n())
#From here, the best way to continue working on this will likely be state-by-state
# Step 1: Filter for the state's players
football_rosters_wi <- football_rosters_usa %>%
filter(hometown_state_clean == "WI")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_wi <- football_rosters_wi %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
filter(NAME == "Erin town, Washington County, Wisconsin" | NAME == "Gardner town, Door County, Wisconsin")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_wi_2021 <- census_data_wi_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_wi_subdivisions_2021 <- census_data_wi_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality|township|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_subdivisions_2021)
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_wi_2021 <- census_data_wi_2021 %>%
mutate(state = case_when(
state == 'Wisconsin' ~ "WI")) %>%
filter(geoid != "5535900") #removing Houlton CDP, population 39
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_wi_complete)
census_data__wi_blocks_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 2, Census Tract 1204.02, St. Croix County, Wisconsin") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "WI") %>%
mutate(city = case_when(
city == "Block Group 2, Census Tract 1204.02, St. Croix County, Wisconsin" ~ "Houlton")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
census_data_wi_blocks_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 2, Census Tract 1204.02, St. Croix County, Wisconsin") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "WI") %>%
mutate(city = case_when(
city == "Block Group 2, Census Tract 1204.02, St. Croix County, Wisconsin" ~ "Houlton")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_blocks_2021)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
View(census_data_wi_2021)
# Step 1: Filter for the state's players
football_rosters_wi <- football_rosters_usa %>%
filter(hometown_state_clean == "WI")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_wi <- football_rosters_wi %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
filter(NAME == "Erin town, Washington County, Wisconsin" | NAME == "Gardner town, Door County, Wisconsin")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_wi_2021 <- census_data_wi_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_wi_subdivisions_2021 <- census_data_wi_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality|township|borough)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_subdivisions_2021)
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_wi_2021 <- census_data_wi_2021 %>%
mutate(state = case_when(
state == 'Wisconsin' ~ "WI")) %>%
filter(geoid != "5535900" & geoid != "5584275") #removing Houlton CDP, population 39 and Waukesha Village, WI
View(census_data_wi_2021)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_wi_complete %>%
filter(is.na(geoid))
census_data_wi_blocks_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 2, Census Tract 1204.02, St. Croix County, Wisconsin") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "WI") %>%
mutate(city = case_when(
city == "Block Group 2, Census Tract 1204.02, St. Croix County, Wisconsin" ~ "Houlton")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_blocks_2021)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# OKLAHOMA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ok <- football_rosters_usa %>%
filter(hometown_state_clean == "OK")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ok <- football_rosters_ok %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ok_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "OK",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_ok_2021 <- census_data_ok_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ok_2021 <- census_data_ok_2021 %>%
mutate(state = case_when(
state == 'Oklahoma' ~ "OK"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_ok_complete <- distinct_hometowns_ok %>%
left_join(census_data_ok_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_ok_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Berryhill, OK, we used the school district because it didn't seem like there was a better option: https://censusreporter.org/profiles/97000US4004020-berryhill-public-schools-ok/
census_data_sd_ok_2021 <- get_acs(geography = "school district (unified)",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "OK",
output = "wide") %>%
clean_names() %>%
filter(name == "Berryhill Public Schools, Oklahoma") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "OK") %>%
mutate(city = case_when(
city == "Berryhill Public Schools, Oklahoma" ~ "Berryhill")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ok_2021 <- bind_rows(census_data_ok_2021, census_data_sd_ok_2021)
hometowns_ok_complete <- distinct_hometowns_ok %>%
left_join(census_data_ok_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ok_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ok_complete, file = "hometowns_ok.csv")
View(hometowns_ok_complete)
