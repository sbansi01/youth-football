# Step 1: Filter for the state's players
football_rosters_tn <- football_rosters_usa %>%
filter(hometown_state_clean == "TN")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_tn <- football_rosters_tn %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_tn_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide")
View(census_data_tn_2021)
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_tn_2021 <- census_data_tn_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
View(census_data_tn_2021)
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_tn_2021 <- census_data_tn_2021 %>%
mutate(state = case_when(
state == 'Tennessee' ~ "TN")) %>%
mutate(city = case_when(
city == 'Nashville-Davidson metropolitan government (balance)'~ "Nashville",
TRUE ~ city))
View(census_data_tn_2021)
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_tn_complete <- distinct_hometowns_tn %>%
left_join(census_data_tn_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_tn_complete)
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_tn_complete %>%
filter(is.na(geoid))
# For Antioch, TN, the block grpup seems to be a good substitute:
# https://censusreporter.org/profiles/14000US47037015627-census-tract-15627-davidson-tn/
census_data_antioch_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 1, Census Tract 156.27, Davidson County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 1, Census Tract 156.27, Davidson County, Tennessee" ~ "Antioch")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Corryton, TN this block group seems like a good substitute
# https://censusreporter.org/profiles/15000US470930065013-bg-3-tract-6501-knox-tn/
census_data_corryton_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 3, Census Tract 65.01, Knox County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 3, Census Tract 65.01, Knox County, Tennessee" ~ "Corryton")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
census_data_eads_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 1, Census Tract 210.23, Shelby County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 1, Census Tract 210.23, Shelby County, Tennessee" ~ "Eads")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Hermitage, Tennesse this block group seems like a good substitute:
# https://censusreporter.org/profiles/15000US470370154021-bg-1-tract-15402-davidson-tn/
census_data_hermitage_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 1, Census Tract 154.02, Davidson County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 1, Census Tract 154.02, Davidson County, Tennessee" ~ "Hermitage")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
census_data_tn_2021 <- bind_rows(census_data_sc_2021, census_data_antioch_tn_2021, census_data_corryton_tn_2021, census_data_hermitage_tn_2021, census_data_eads_tn_2021)
View(census_data_tn_2021)
View(census_data_tn_2021)
census_data_tn_2021 <- bind_rows(census_data_tn_2021, census_data_antioch_tn_2021, census_data_corryton_tn_2021, census_data_hermitage_tn_2021, census_data_eads_tn_2021)
View(census_data_tn_2021)
# Step 1: Filter for the state's players
football_rosters_tn <- football_rosters_usa %>%
filter(hometown_state_clean == "TN")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_tn <- football_rosters_tn %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_tn_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide")
View(census_data_tn_2021)
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_tn_2021 <- census_data_tn_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
View(census_data_tn_2021)
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_tn_2021 <- census_data_tn_2021 %>%
mutate(state = case_when(
state == 'Tennessee' ~ "TN")) %>%
mutate(city = case_when(
city == 'Nashville-Davidson metropolitan government (balance)'~ "Nashville",
TRUE ~ city))
View(census_data_tn_2021)
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_tn_complete <- distinct_hometowns_tn %>%
left_join(census_data_tn_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_tn_complete)
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_tn_complete %>%
filter(is.na(geoid))
census_data_tn_2021 <- bind_rows(census_data_tn_2021, census_data_antioch_tn_2021, census_data_corryton_tn_2021, census_data_hermitage_tn_2021, census_data_eads_tn_2021)
View(census_data_tx_2021)
View(census_data_tn_2021)
hometowns_tn_complete <- distinct_hometowns_tn %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_tn_complete <- distinct_hometowns_tn %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_tn_complete)
# Step 1: Filter for the state's players
football_rosters_tn <- football_rosters_usa %>%
filter(hometown_state_clean == "TN")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_tn <- football_rosters_tn %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_tn_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_tn_2021 <- census_data_tn_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_tn_2021 <- census_data_tn_2021 %>%
mutate(state = case_when(
state == 'Tennessee' ~ "TN")) %>%
mutate(city = case_when(
city == 'Nashville-Davidson metropolitan government (balance)'~ "Nashville",
TRUE ~ city))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_tn_complete <- distinct_hometowns_tn %>%
left_join(census_data_tn_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_tn_complete %>%
filter(is.na(geoid))
# Step 1: Filter for the state's players
football_rosters_tn <- football_rosters_usa %>%
filter(hometown_state_clean == "TN")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_tn <- football_rosters_tn %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_tn_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide")
View(census_data_tn_2021)
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_tn_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_tn_2021 <- census_data_tn_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
View(census_data_tn_2021)
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_tn_2021 <- census_data_tn_2021 %>%
mutate(state = case_when(
state == 'Tennessee' ~ "TN")) %>%
mutate(city = case_when(
city == 'Nashville-Davidson metropolitan government (balance)'~ "Nashville",
TRUE ~ city))
View(census_data_tn_2021)
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_tn_complete <- distinct_hometowns_tn %>%
left_join(census_data_tn_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_tn_complete)
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_tn_complete %>%
filter(is.na(geoid))
# For Antioch, TN, the block grpup seems to be a good substitute:
# https://censusreporter.org/profiles/14000US47037015627-census-tract-15627-davidson-tn/
census_data_antioch_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 1, Census Tract 156.27, Davidson County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 1, Census Tract 156.27, Davidson County, Tennessee" ~ "Antioch")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Corryton, TN this block group seems like a good substitute
# https://censusreporter.org/profiles/15000US470930065013-bg-3-tract-6501-knox-tn/
census_data_corryton_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 3, Census Tract 65.01, Knox County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 3, Census Tract 65.01, Knox County, Tennessee" ~ "Corryton")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
census_data_eads_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 1, Census Tract 210.23, Shelby County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 1, Census Tract 210.23, Shelby County, Tennessee" ~ "Eads")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Hermitage, Tennesse this block group seems like a good substitute:
# https://censusreporter.org/profiles/15000US470370154021-bg-1-tract-15402-davidson-tn/
census_data_hermitage_tn_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TN",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 1, Census Tract 154.02, Davidson County, Tennessee") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TN") %>%
mutate(city = case_when(
city == "Block Group 1, Census Tract 154.02, Davidson County, Tennessee" ~ "Hermitage")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
census_data_tn_2021 <- bind_rows(census_data_tn_2021, census_data_antioch_tn_2021, census_data_corryton_tn_2021, census_data_hermitage_tn_2021, census_data_eads_tn_2021)
View(census_data_tn_2021)
census_data_tn_2021 <- bind_rows(census_data_tn_2021, census_data_antioch_tn_2021, census_data_corryton_tn_2021, census_data_hermitage_tn_2021, census_data_eads_tn_2021)
View(census_data_tn_2021)
View(census_data_tn_2021)
hometowns_tn_complete <- distinct_hometowns_tn %>%
left_join(census_data_tn_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_tn_complete)
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
filter(NAME == "Erin town, Washington County, Wisconsin" | NAME == "Gardner town, Door County, Wisconsin")
View(census_data_wi_subdivisions_2021)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_wi_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
View(hometowns_wi_complete)
# WISCONSIN HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_wi <- football_rosters_usa %>%
filter(hometown_state_clean == "WI")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_wi <- football_rosters_wi %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_wi_2021 <- census_data_wi_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_wi_2021 <- census_data_wi_2021 %>%
mutate(state = case_when(
state == 'Wisconsin' ~ "WI"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_wi_complete)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(census_data_wi_2021)
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_subdivisions_2021)
hometowns_wa_complete <- distinct_hometowns_wa %>%
hometowns_wa_complete <- distinct_hometowns_wa %>%
left_join(census_data_wa_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
left_join(census_data_wa_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_wa_complete <- distinct_hometowns_wa %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_wi_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
View(census_data_wi_2021)
View(census_data_wi_subdivisions_2021)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_subdivisions_2021)
View(census_data_wi_2021)
hometowns_wa_complete <- distinct_hometowns_wa %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(census_data_wi_2021)
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
filter(NAME == "Erin town, Washington County, Wisconsin" | NAME == "Gardner town, Door County, Wisconsin")
View(census_data_wi_subdivisions_2021)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_subdivisions_2021)
View(census_data_wi_2021)
# WISCONSIN HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_wi <- football_rosters_usa %>%
filter(hometown_state_clean == "WI")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_wi <- football_rosters_wi %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_wi_2021 <- census_data_wi_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
View(census_data_wi_2021)
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_wi_2021 <- census_data_wi_2021 %>%
mutate(state = case_when(
state == 'Wisconsin' ~ "WI"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_wi_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
filter(NAME == "Erin town, Washington County, Wisconsin" | NAME == "Gardner town, Door County, Wisconsin")
hometowns_wa_complete <- distinct_hometowns_wa %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# WISCONSIN HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_wi <- football_rosters_usa %>%
filter(hometown_state_clean == "WI")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_wi <- football_rosters_wi %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_wi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_wi_2021 <- census_data_wi_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_wi_2021 <- census_data_wi_2021 %>%
mutate(state = case_when(
state == 'Wisconsin' ~ "WI"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_wi_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
census_data_wi_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "WI",
output = "wide") %>%
filter(NAME == "Erin town, Washington County, Wisconsin" | NAME == "Gardner town, Door County, Wisconsin")
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_wi_2021 <- bind_rows(census_data_wi_2021, census_data_wi_subdivisions_2021)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_wi_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_wi_complete, file = "hometowns_wi.csv")
View(hometowns_wi_complete)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(hometowns_wi_complete)
View(distinct_hometowns_wi)
View(hometowns_wi_complete)
View(census_data_wi_2021)
View(distinct_hometowns_wi)
hometowns_wi_complete <- distinct_hometowns_wi %>%
left_join(census_data_wi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
View(census_data_wi_2021)
