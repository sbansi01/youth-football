city == 'Key Biscayne village' ~ "Key Biscayne",
city == 'Pinecrest village' ~ "Pinecrest",
city == 'Wellington village' ~ "Wellington",
TRUE ~ city))
city_pops_fl_2021 <- city_pops_fl_2021 %>%
rename(population = estimate) %>%
filter(city != "Plantation" | population != 4565) #Removing the second Plantation, FL that is a CDP
lithia_pop_2021 <- data.frame(city = "Lithia", state = "FL", population = 29236) #obtained using zip code https://censusreporter.org/profiles/86000US33547-33547/
ponte_pop_2021 <- data.frame(city = "Ponte Vedra Beach", state = "FL", population = 28721) #obtained using zip code https://censusreporter.org/profiles/86000US32082-32082/
santa_rosa_pop_2021 <- data.frame(city = "Santa Rosa Beach", state = "FL", population = 18544) #obtained using zip code https://censusreporter.org/profiles/86000US32459-32459/
st_johns_pop_2021 <- data.frame(city = "St. Johns", state = "FL", population = 62354) #obtained using zip code of high school https://censusreporter.org/profiles/86000US32259-32259/
city_pops_fl_2021 <- bind_rows(city_pops_fl_2021, lithia_pop_2021, ponte_pop_2021, santa_rosa_pop_2021, st_johns_pop_2021)
#Join
hometowns_fl_complete <- distinct_hometowns_fl %>%
left_join(city_pops_fl_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/population,1)) %>%
arrange(desc(players_per_hundred_thousand))
#Add to SE
hometowns_se_complete <- bind_rows(hometowns_se_complete, hometowns_fl_complete) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(hometowns_se_complete, file = "hometowns_se.csv")
# LOUISIANA
#Let's keep going: LA
football_rosters_la <- football_rosters_usa %>%
filter(hometown_state_clean == "LA")
distinct_hometowns_la <- football_rosters_la %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
#Let's see if we can grab the populations of every city in LA
city_pops_la_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "LA") %>%
clean_names()
#Now let's see if we can modify this city_pops dataframe to prepare it for a join with our roster data
city_pops_la_2021 <- city_pops_la_2021 %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(state = case_when(
state == 'Louisiana' ~ "LA")) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(city, state, estimate)
city_pops_la_2021 <- city_pops_la_2021 %>%
rename(population = estimate)
geismar_pop_2021 <- data.frame(city = "Geismar", state = "LA", population = 9795) #obtained using zip code https://censusreporter.org/profiles/86000US70734-70734/
st_amant_pop_2021 <- data.frame(city = "St. Amant", state = "LA", population = 10442) #obtained using zip code https://censusreporter.org/profiles/86000US70774-70774/
vacherie_pop_2021 <- tibble(
city = "Vacherie",
state = "LA",
population = sum(city_pops_la_2021$population[city_pops_la_2021$city %in% c("North Vacherie", "South Vacherie")])
) #population of Vacherie obtained by summing North and South Vacherie, per https://en.wikipedia.org/wiki/Vacherie,_Louisiana
city_pops_la_2021 <- bind_rows(city_pops_la_2021, geismar_pop_2021, st_amant_pop_2021, vacherie_pop_2021)
#Join
hometowns_la_complete <- distinct_hometowns_la %>%
left_join(city_pops_la_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/population,1)) %>%
arrange(desc(players_per_hundred_thousand))
#Add to SE
hometowns_se_complete <- bind_rows(hometowns_se_complete, hometowns_la_complete) %>%
arrange(desc(players_per_hundred_thousand))
#Find and fix NA values
#hometowns_la_complete %>%
#filter(is.na(population))
# CSV
#write_csv(hometowns_se_complete, file = "hometowns_se.csv")
# TEXAS
#Let's keep going: TX
football_rosters_tx <- football_rosters_usa %>%
filter(hometown_state_clean == "TX")
distinct_hometowns_tx <- football_rosters_tx %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
#Let's see if we can grab the populations of every city in TX
city_pops_tx_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "TX") %>%
clean_names()
#Now let's see if we can modify this city_pops dataframe to prepare it for a join with our roster data
city_pops_tx_2021 <- city_pops_tx_2021 %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(state = case_when(
state == 'Texas' ~ "TX")) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(city, state, estimate)
city_pops_tx_2021 <- city_pops_tx_2021 %>%
rename(population = estimate)
brock_pop_2021 <- data.frame(city = "Brock", state = "TX", population = 5894) #obtained using school district because all players went to the same high school https://censusreporter.org/profiles/97000US4811460-brock-independent-school-district-tx/
cypress_pop_2021 <- data.frame(city = "Cypress", state = "TX", population = 88375) #obtained using zip code https://censusreporter.org/profiles/86000US77429-77429/
klein_pop_2021 <- data.frame(city = "Klein", state = "TX", population = 270168) #obtained using school district because all players went to the same high school https://censusreporter.org/profiles/97000US4825740-klein-independent-school-district-tx/
new_caney_pop_2021 <- data.frame(city = "New Caney", state = "TX", population = 29992) #obtained using zip code https://censusreporter.org/profiles/86000US77357-77357/
wall_pop_2021 <- data.frame(city = "Wall", state = "TX", population = 185) #obtained using zip code https://censusreporter.org/profiles/86000US76957-76957/
city_pops_tx_2021 <- bind_rows(city_pops_tx_2021, brock_pop_2021, cypress_pop_2021, klein_pop_2021, new_caney_pop_2021, wall_pop_2021)
#Join
hometowns_tx_complete <- distinct_hometowns_tx %>%
left_join(city_pops_tx_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/population,1)) %>%
arrange(desc(players_per_hundred_thousand))
#Add to SE
hometowns_se_complete <- bind_rows(hometowns_se_complete, hometowns_tx_complete) %>%
arrange(desc(players_per_hundred_thousand))
#Find and fix NA values
hometowns_tx_complete %>%
filter(is.na(population))
# CSV
#write_csv(hometowns_se_complete, file = "hometowns_se.csv")
View(hometowns_se_complete)
View(hometowns_tx_complete)
View(city_pops_tx_2021)
#Let's keep going: TX
football_rosters_tx <- football_rosters_usa %>%
filter(hometown_state_clean == "TX")
distinct_hometowns_tx <- football_rosters_tx %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
#Let's see if we can grab the populations of every city in TX
city_pops_tx_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "TX") %>%
clean_names()
View(city_pops_tx_2021)
#Let's keep going: TX
football_rosters_tx <- football_rosters_usa %>%
filter(hometown_state_clean == "TX")
distinct_hometowns_tx <- football_rosters_tx %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
#Let's see if we can grab the populations of every city in TX
city_pops_tx_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "TX") %>%
clean_names()
#Now let's see if we can modify this city_pops dataframe to prepare it for a join with our roster data
city_pops_tx_2021 <- city_pops_tx_2021 %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(state = case_when(
state == 'Texas' ~ "TX")) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(city, state, estimate)
city_pops_tx_2021 <- city_pops_tx_2021 %>%
rename(population = estimate) %>%
filter(city != "Mesquite" | population != 181) #Removing the second Mesquite, TX that is a CDP
#libraries
library(tidyverse)
library(googlesheets4)
library(janitor)
library(tidycensus)
#library(lubridate)
#install.packages("googlesheets4")
#install.packages("ipumsr")
#library(ipumsr)
#Authenticating with Google account
#gs4_auth()
# Load Census API key
Sys.setenv(CENSUS_API_KEY = "5cb2b9c628a1d1329c5bf4d36fe4435c6501efc8", overwrite = TRUE)
#Load Aspen Institute participation rate data
#age_6_12 <- read_sheet("https://docs.google.com/spreadsheets/d/1AvA8phsRgDh9AXj0sMeH1zZQtjJP9JD-8A2AH9YrBzY/edit#gid=0", sheet = "Ages 6-12")
#age_13_17 <- read_sheet("https://docs.google.com/spreadsheets/d/1AvA8phsRgDh9AXj0sMeH1zZQtjJP9JD-8A2AH9YrBzY/edit#gid=0", sheet = "Ages 13-17")
#Load football roster scraper. Also did some cleaning for special cases here. For the players who were missing hometown information, this was obtained by looking at rosters from previous years.
football_rosters <- read_csv("football_roster.csv") %>%
clean_names() %>%
mutate(hometown = case_when(
hometown == "Pompano, Beach, Fla." ~ "Pompano Beach, Fla.",
hometown == "Livemore Calif." ~ "Livemore, Calif.",
hometown == "Washington D.C." ~ "Washington, D.C.",
hometown == "Tampa. Fla." ~ "Tampa, Fla.",
hometown == "Upper Marlboro. Md." ~ "Upper Marlboro, Md.",
hometown == "Norfolk,Va." ~ "Norfolk, Va.",
hometown == "Bronx N.Y." ~ "Bronx, N.Y.",
hometown == "Cocoa Fla." ~ "Cocoa, Fla.",
hometown == "Jefferson" ~ "Jefferson Township, NJ",
hometown == "Melbourne" ~ "Melbourne, FL",
hometown == "Chicago" ~ "Chicago, IL",
hometown == "Cincinnati" ~ "Cincinnati, OH",
hometown == "Cleveland" ~ "Cleveland, OH",
hometown == "St. Louis" ~ "St. Louis, MO",
hometown == "Inglewood" ~ "Inglewood, CA",
hometown == "Chatworth, Ga." ~ "Chatsworth, Ga.",
hometown == "Kingland, Ga." ~ "Kingsland, Ga.",
hometown == "East Cobb, GA" ~ "Marietta, GA",
hometown == "Platville, Ala." ~ "Prattville, Ala.",
TRUE ~ hometown)) %>%
mutate(hometown = case_when(
name == "Feyisayo Oluleye" ~ "Lancaster, PA",
name == "Kyle Vaccarella" ~ "Fairfield, CT",
TRUE ~ hometown))
#Let's also use this as a time to load a state crosswalk we'll use later
state_crosswalk <- read_csv("state_crosswalk.csv") %>%
mutate(state_name_caps = str_to_upper(state_name)) %>%
select(state_abb, state_name_caps)
#One more: let's load some hometowns that we passed through and cleaned with Open Refine
hometowns_open_refine <- read_csv("hometowns_open_refine.csv")
#Checking to see that we have 68 schools and the player counts for each school
school_check <- football_rosters %>%
group_by(school) %>%
summarise(total_players = n()) %>%
arrange(total_players)
#Checking to make sure there are no duplicate players
player_check <- football_rosters %>%
group_by(name, school) %>%
summarise(total = n()) %>%
arrange(desc(total))
#CLEANING/STANDARDIZING STATE
#Splitting the hometown column so we can work with the state
football_rosters <- football_rosters %>%
mutate(hometown_cleaning = hometown) %>%
separate(hometown_cleaning, into = c("hometown_city", "hometown_state", "hometown_country"), sep = ", ")
#What kind of values are we getting in hometown_state?
state_check <- football_rosters %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Many of those aren't U.S. states. Let's make a new dataframe that only has players from the 50 states:
excluded_states <- c(" Western Australia", "Alberta", "American Samoa", "Australia", "Bahamas", "Belgium", "Canada", "China", "Colombia", "Congo", "County Kerry", "Denmark", "DR of the Congo", "England", "Finland", "France", "Gabon", "Germany", "Ghana", "Ireland", "Japan", "Manitoba", "Mexico", "N.S.", "New South Wales", "New Zealand", "Nigeria", "NSW", "Ont.", "Ontario", "QC", "Que.", "Quebec", "Québec", "Queensland", "Saskatchewan", "Serbia", "South Africa", "South Australia", "Sweden", "Switzerland", "The Netherlands", "Tonga", "United Kingdom", "Victoria", "Victoria AU", "Western Samoa")
football_rosters_usa <- football_rosters %>%
filter(!(hometown_state %in% excluded_states) | is.na(hometown_state)) %>%
mutate(hometown_state = case_when(
hometown_state == "Maui" ~ "HI",
hometown_state == "New York City" ~ "NY",
TRUE ~ hometown_state))
#And now let's recheck those hometown_state values:
state_check_usa <- football_rosters_usa %>%
group_by(hometown_state) %>%
summarise(total = n()) %>%
arrange(hometown_state)
#Let's standardize these to the state postal abbreviation:
#First, let's try removing punctuation and making everything upper case:
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_first_try = str_to_upper(gsub("[[:punct:]]", "", hometown_state)))
#Second, let's see if we can use our crosswalk:
football_rosters_usa <- football_rosters_usa %>%
left_join(state_crosswalk, by=c("hometown_state_first_try" = "state_name_caps"))
football_rosters_usa <- football_rosters_usa %>%
rename(hometown_state_second_try = state_abb)
#Third, let's combine the results of our first two tries and check to see how much that reduced our unique values
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_third_try = ifelse(is.na(hometown_state_second_try), hometown_state_first_try, hometown_state_second_try))
state_check_usa_update <- football_rosters_usa %>%
group_by(hometown_state_third_try) %>%
summarise(total = n()) %>%
arrange(hometown_state_third_try)
#Now we're down to much fewer state values. Let's manually take care of the rest.
football_rosters_usa <- football_rosters_usa %>%
mutate(hometown_state_clean = case_when(
hometown_state_third_try == "ALA" ~ "AL",
hometown_state_third_try == "ARIZ" ~ "AZ",
hometown_state_third_try == "ARK" ~ "AR",
hometown_state_third_try == "CALF" | hometown_state_third_try == "CALIF" ~ "CA",
hometown_state_third_try == "COL" | hometown_state_third_try == "COLO" ~ "CO",
hometown_state_third_try == "CONN" ~ "CT",
hometown_state_third_try == "DEL" ~ "DE",
hometown_state_third_try == "FLA" ~ "FL",
hometown_state_third_try == "ILL" ~ "IL",
hometown_state_third_try == "IND" ~ "IN",
hometown_state_third_try == "KAN" ~ "KS",
hometown_state_third_try == "MASS" ~ "MA",
hometown_state_third_try == "MICH" ~ "MI",
hometown_state_third_try == "MINN" ~ "MN",
hometown_state_third_try == "MISS" ~ "MS",
hometown_state_third_try == "MONT" ~ "MT",
hometown_state_third_try == "NEB" ~ "NE",
hometown_state_third_try == "NEV" ~ "NV",
hometown_state_third_try == "OKLA" ~ "OK",
hometown_state_third_try == "ORE" ~ "OR",
hometown_state_third_try == "PENN" ~ "PA",
hometown_state_third_try == "TENN" ~ "TN",
hometown_state_third_try == "W VA" | hometown_state_third_try == "WVA" ~ "WV",
hometown_state_third_try == "WASH" ~ "WA",
hometown_state_third_try == "WIS" | hometown_state_third_try == "WISC" ~ "WI",
hometown_state_third_try == "WYO" ~ "WY",
TRUE ~ hometown_state_third_try))
#What's the final state breakdown?
football_rosters_usa_states <- football_rosters_usa %>%
group_by(hometown_state_clean) %>%
summarise(total_players=n()) %>%
arrange(desc(total_players))
#STATES WITH POPULATION DATA
#Let's try to add in some population data and try to figure out the number of Power 5 football players per 100,000 residents in a state
#First, let's get ourselves a dataframe that has state postal abbreviations and their most recent ACS state population:
state_pops_2021 <- get_acs(geography = "state",
variables = "B01003_001",
year = 2021)
state_pops_2021 <- state_pops_2021 %>%
clean_names() %>%
mutate(name_caps = str_to_upper(name)) %>%
mutate(name_caps = case_when(
name_caps == "DISTRICT OF COLUMBIA" ~ "WASHINGTON, DC",
TRUE ~ name_caps
)) %>%
left_join(state_crosswalk, by=c("name_caps" = "state_name_caps"))
state_pops_2021 <- state_pops_2021 %>%
select(state_abb, estimate) %>%
filter(!is.na(state_abb)) #Removed NA value, which was Puerto Rico
# Now, let's join our population data to our state count of football players data:
football_rosters_usa_states <- football_rosters_usa_states %>%
inner_join(state_pops_2021, by=c("hometown_state_clean" = "state_abb"))
football_rosters_usa_states <- football_rosters_usa_states %>%
rename(total_pop = estimate)
football_rosters_usa_states <- football_rosters_usa_states %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/total_pop,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(football_rosters_usa_states, file = "state_counts.csv")
# CLEANING/STANDARDIZING HOMETOWN - NEEDS MORE WORK***
# CSV - going to try cleaning this through Open Refine
#write_csv(distinct_hometowns, file = "hometowns_to_clean.csv")
#Join our Open Refine dataframe to our dataframe of Power Five players
hometowns_open_refine_modified <- hometowns_open_refine %>%
select(hometown_city, hometown_city_clean, hometown_state_clean)
football_rosters_usa <- football_rosters_usa %>%
left_join(hometowns_open_refine_modified, by = c("hometown_city", "hometown_state_clean"))
distinct_hometowns <- football_rosters_usa %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total = n()) #THIS WILL LIKELY NEED MORE WORK/CLEANING/CHECKING***
# SOUTHEAST: GEORGIA, ALABAMA, MISSISSIPPI
#Let's start working on a few states that will likely be consequential for this project: GA, AL, MS
football_rosters_se <- football_rosters_usa %>%
filter(hometown_state_clean == "GA" | hometown_state_clean == "AL" | hometown_state_clean == "MS")
distinct_hometowns_se <- football_rosters_se %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
#Let's see if we can grab the populations of every city in GA, AL, and MS
city_pops_ga_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "GA")
city_pops_al_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "AL")
city_pops_ms_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "MS")
city_pops_se_2021 <- bind_rows(city_pops_ga_2021, city_pops_al_2021, city_pops_ms_2021) %>%
clean_names()
#Now let's see if we can modify this city_pops dataframe to prepare it for a join with our roster data
city_pops_se_2021 <- city_pops_se_2021 %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(state = case_when(
state == 'Georgia' ~ "GA",
state == 'Alabama' ~ "AL",
state == 'Mississippi' ~ "MS"
)) %>%
mutate(city = gsub("\\b(town|city|CDP)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(city, state, estimate) %>%
mutate(city = case_when(
city == 'Athens-Clarke County unified government (balance)' ~ "Athens",
city == 'Macon-Bibb County' ~ "Macon",
city == 'McRae-Helena' ~ 'McRae',
TRUE ~ city))
city_pops_se_2021 <- city_pops_se_2021 %>%
rename(population = estimate)
ellenwood_pop_2021 <- data.frame(city = "Ellenwood", state = "GA", population = 41037) #obtained using zip code from https://censusreporter.org/profiles/86000US30294-30294/
highland_pop_2021 <- data.frame(city = "Highland Home", state = "AL", population = 1423) #obtained using zip code from https://censusreporter.org/profiles/86000US36041-36041/
nesbit_pop_2021 <- data.frame(city = "Nesbit", state = "MS", population = 8906) #obtained using zip code from https://censusreporter.org/profiles/86000US38651-38651/
rabun_pop_2021 <- data.frame(city = "Rabun Gap", state = "GA", population = 1948) #obtained using zip code from https://censusreporter.org/profiles/86000US30568-30568/
rex_pop_2021 <- data.frame(city = "Rex", state = "GA", population = 17522) #obtained using zip code from https://censusreporter.org/profiles/86000US30273-30273/
sublinga_pop_2021 <- data.frame(city = "Subligna", state = "GA", population = 1538) #obtained using block group from https://censusreporter.org/profiles/15000US130550101002-bg-2-tract-101-chattooga-ga/
friendship_pop_2021 <- data.frame(city = "Friendship", state = "MS", population = 2430) #obtained using population of nearby Collins, MS, where the player went to HS https://censusreporter.org/profiles/16000US2815140-collins-ms/
watson_pop_2021 <- data.frame(city = "Watson", state = "AL", population = 1252) #obtained using population of nearby Brookside, AL, which seems to include Watson https://censusreporter.org/profiles/16000US0109736-brookside-al/
city_pops_se_2021 <- bind_rows(city_pops_se_2021, ellenwood_pop_2021, highland_pop_2021, nesbit_pop_2021, rabun_pop_2021, rex_pop_2021, sublinga_pop_2021, friendship_pop_2021, watson_pop_2021)
#Join
hometowns_se_complete <- distinct_hometowns_se %>%
left_join(city_pops_se_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/population,1)) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(hometowns_se_complete, file = "hometowns_se.csv")
# FLORIDA
#Let's start working on another potentially important state: Florida
football_rosters_fl <- football_rosters_usa %>%
filter(hometown_state_clean == "FL")
distinct_hometowns_fl <- football_rosters_fl %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
#Let's see if we can grab the populations of every city in FL
city_pops_fl_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "FL") %>%
clean_names()
#Now let's see if we can modify this city_pops dataframe to prepare it for a join with our roster data
city_pops_fl_2021 <- city_pops_fl_2021 %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(state = case_when(
state == 'Florida' ~ "FL")) %>%
mutate(city = gsub("\\b(town|city|CDP)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(city, state, estimate) %>%
mutate(city = case_when(
city == 'Estero village' ~ "Estero",
city == 'Key Biscayne village' ~ "Key Biscayne",
city == 'Pinecrest village' ~ "Pinecrest",
city == 'Wellington village' ~ "Wellington",
TRUE ~ city))
city_pops_fl_2021 <- city_pops_fl_2021 %>%
rename(population = estimate) %>%
filter(city != "Plantation" | population != 4565) #Removing the second Plantation, FL that is a CDP
lithia_pop_2021 <- data.frame(city = "Lithia", state = "FL", population = 29236) #obtained using zip code https://censusreporter.org/profiles/86000US33547-33547/
ponte_pop_2021 <- data.frame(city = "Ponte Vedra Beach", state = "FL", population = 28721) #obtained using zip code https://censusreporter.org/profiles/86000US32082-32082/
santa_rosa_pop_2021 <- data.frame(city = "Santa Rosa Beach", state = "FL", population = 18544) #obtained using zip code https://censusreporter.org/profiles/86000US32459-32459/
st_johns_pop_2021 <- data.frame(city = "St. Johns", state = "FL", population = 62354) #obtained using zip code of high school https://censusreporter.org/profiles/86000US32259-32259/
city_pops_fl_2021 <- bind_rows(city_pops_fl_2021, lithia_pop_2021, ponte_pop_2021, santa_rosa_pop_2021, st_johns_pop_2021)
#Join
hometowns_fl_complete <- distinct_hometowns_fl %>%
left_join(city_pops_fl_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/population,1)) %>%
arrange(desc(players_per_hundred_thousand))
#Add to SE
hometowns_se_complete <- bind_rows(hometowns_se_complete, hometowns_fl_complete) %>%
arrange(desc(players_per_hundred_thousand))
# CSV
#write_csv(hometowns_se_complete, file = "hometowns_se.csv")
# LOUISIANA
#Let's keep going: LA
football_rosters_la <- football_rosters_usa %>%
filter(hometown_state_clean == "LA")
distinct_hometowns_la <- football_rosters_la %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
#Let's see if we can grab the populations of every city in LA
city_pops_la_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "LA") %>%
clean_names()
#Now let's see if we can modify this city_pops dataframe to prepare it for a join with our roster data
city_pops_la_2021 <- city_pops_la_2021 %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(state = case_when(
state == 'Louisiana' ~ "LA")) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(city, state, estimate)
city_pops_la_2021 <- city_pops_la_2021 %>%
rename(population = estimate)
geismar_pop_2021 <- data.frame(city = "Geismar", state = "LA", population = 9795) #obtained using zip code https://censusreporter.org/profiles/86000US70734-70734/
st_amant_pop_2021 <- data.frame(city = "St. Amant", state = "LA", population = 10442) #obtained using zip code https://censusreporter.org/profiles/86000US70774-70774/
vacherie_pop_2021 <- tibble(
city = "Vacherie",
state = "LA",
population = sum(city_pops_la_2021$population[city_pops_la_2021$city %in% c("North Vacherie", "South Vacherie")])
) #population of Vacherie obtained by summing North and South Vacherie, per https://en.wikipedia.org/wiki/Vacherie,_Louisiana
city_pops_la_2021 <- bind_rows(city_pops_la_2021, geismar_pop_2021, st_amant_pop_2021, vacherie_pop_2021)
#Join
hometowns_la_complete <- distinct_hometowns_la %>%
left_join(city_pops_la_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/population,1)) %>%
arrange(desc(players_per_hundred_thousand))
#Add to SE
hometowns_se_complete <- bind_rows(hometowns_se_complete, hometowns_la_complete) %>%
arrange(desc(players_per_hundred_thousand))
#Find and fix NA values
#hometowns_la_complete %>%
#filter(is.na(population))
# CSV
#write_csv(hometowns_se_complete, file = "hometowns_se.csv")
# TEXAS
#Let's keep going: TX
football_rosters_tx <- football_rosters_usa %>%
filter(hometown_state_clean == "TX")
distinct_hometowns_tx <- football_rosters_tx %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
#Let's see if we can grab the populations of every city in TX
city_pops_tx_2021 <- get_acs(geography = "place",
variables = "B01003_001",
year = 2021,
state = "TX") %>%
clean_names()
#Now let's see if we can modify this city_pops dataframe to prepare it for a join with our roster data
city_pops_tx_2021 <- city_pops_tx_2021 %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(state = case_when(
state == 'Texas' ~ "TX")) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(city, state, estimate)
city_pops_tx_2021 <- city_pops_tx_2021 %>%
rename(population = estimate) %>%
filter(city != "Mesquite" | population != 181) #Removing the second Mesquite, TX that is a CDP
brock_pop_2021 <- data.frame(city = "Brock", state = "TX", population = 5894) #obtained using school district because all players went to the same high school https://censusreporter.org/profiles/97000US4811460-brock-independent-school-district-tx/
cypress_pop_2021 <- data.frame(city = "Cypress", state = "TX", population = 88375) #obtained using zip code https://censusreporter.org/profiles/86000US77429-77429/
klein_pop_2021 <- data.frame(city = "Klein", state = "TX", population = 270168) #obtained using school district because all players went to the same high school https://censusreporter.org/profiles/97000US4825740-klein-independent-school-district-tx/
new_caney_pop_2021 <- data.frame(city = "New Caney", state = "TX", population = 29992) #obtained using zip code https://censusreporter.org/profiles/86000US77357-77357/
wall_pop_2021 <- data.frame(city = "Wall", state = "TX", population = 185) #obtained using zip code https://censusreporter.org/profiles/86000US76957-76957/
city_pops_tx_2021 <- bind_rows(city_pops_tx_2021, brock_pop_2021, cypress_pop_2021, klein_pop_2021, new_caney_pop_2021, wall_pop_2021)
#Join
hometowns_tx_complete <- distinct_hometowns_tx %>%
left_join(city_pops_tx_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_hundred_thousand = round((total_players*100000)/population,1)) %>%
arrange(desc(players_per_hundred_thousand))
#Add to SE
hometowns_se_complete <- bind_rows(hometowns_se_complete, hometowns_tx_complete) %>%
arrange(desc(players_per_hundred_thousand))
#Find and fix NA values
hometowns_tx_complete %>%
filter(is.na(population))
# CSV
#write_csv(hometowns_se_complete, file = "hometowns_se.csv")
View(hometowns_tx_complete)
View(distinct_hometowns_se)
View(hometowns_se_complete)
# CSV
write_csv(hometowns_se_complete, file = "hometowns_se.csv")
