# For Rex, GA, the zip code (30273) seems to be a good substitute: https://censusreporter.org/profiles/86000US30273-30273/
census_data_rex_ga_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 30273") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30273" ~ "Rex")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Subligna, GA, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US130550101002-bg-2-tract-101-chattooga-ga/
census_data_subligna_ga_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "GA",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 2, Census Tract 101, Chattooga County, Georgia") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "Block Group 2, Census Tract 101, Chattooga County, Georgia" ~ "Subligna")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ga_2021 <- bind_rows(census_data_ga_2021, census_data_ellenwood_ga_2021, census_data_rabun_ga_2021, census_data_rex_ga_2021, census_data_subligna_ga_2021)
hometowns_ga_complete <- distinct_hometowns_ga %>%
left_join(census_data_ga_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ga_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ga_complete, file = "hometowns_ga.csv")
# Figuring out Black population in the state
black_pop_ga_2021 <- get_acs(geography = "state",
variables = c("B01003_001", "B02001_003"),
year = 2021,
state = "GA",
output = "wide") %>%
clean_names() %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
select(geoid, name, total_pop, black_pop, pct_black)
View(black_pop_ga_2021)
View(black_pop_usa_2021)
# Storing the Black population as a value
pct_black_ga <- black_pop_ga_2021$pct_black
# Add to hometowns dataframe
hometowns_ga_complete <- hometowns_ga_complete %>%
mutate(black_pop_vs_state = if_else(
pct_black > pct_black_ga, "above", "below or equal"))
View(hometowns_ga_complete)
# Summary
race_analysis_ga <- hometowns_ga_complete %>%
group_by(black_pop_vs_state) %>%
summarize(
total_towns = n(),
sum_total_pop = sum(total_pop),
sum_total_players = sum(total_players)
) %>%
mutate(pct_players = round((sum_total_players / sum(sum_total_players)) * 100, 1)) %>%
mutate(players_per_hundred_thousand = round((sum_total_players*1000000)/sum_total_pop,1))
View(race_analysis_ga)
# SOUTH CAROLINA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_sc <- football_rosters_usa %>%
filter(hometown_state_clean == "SC")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_sc <- football_rosters_sc %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_sc_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "SC",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_sc_2021 <- census_data_sc_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_sc_2021 <- census_data_sc_2021 %>%
mutate(state = case_when(
state == 'South Carolina' ~ "SC"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_sc_complete <- distinct_hometowns_sc %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_sc_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Craytonville, SC, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US450070115013-bg-3-tract-11501-anderson-sc/
census_data_craytonville_sc_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "SC",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 3, Census Tract 115.01, Anderson County, South Carolina") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "SC") %>%
mutate(city = case_when(
city == "Block Group 3, Census Tract 115.01, Anderson County, South Carolina" ~ "Craytonville")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_sc_2021 <- bind_rows(census_data_sc_2021, census_data_craytonville_sc_2021)
hometowns_sc_complete <- distinct_hometowns_sc %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_sc_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_sc_complete, file = "hometowns_sc.csv")
# SOUTH CAROLINA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_sc <- football_rosters_usa %>%
filter(hometown_state_clean == "SC")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_sc <- football_rosters_sc %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_sc_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "SC",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_sc_2021 <- census_data_sc_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_sc_2021 <- census_data_sc_2021 %>%
mutate(state = case_when(
state == 'South Carolina' ~ "SC"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_sc_complete <- distinct_hometowns_sc %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_sc_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Craytonville, SC, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US450070115013-bg-3-tract-11501-anderson-sc/
census_data_craytonville_sc_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "SC",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 3, Census Tract 115.01, Anderson County, South Carolina") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "SC") %>%
mutate(city = case_when(
city == "Block Group 3, Census Tract 115.01, Anderson County, South Carolina" ~ "Craytonville")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_sc_2021 <- bind_rows(census_data_sc_2021, census_data_craytonville_sc_2021)
hometowns_sc_complete <- distinct_hometowns_sc %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_sc_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_sc_complete, file = "hometowns_sc.csv")
# Figuring out Black population in the state
black_pop_sc_2021 <- get_acs(geography = "state",
variables = c("B01003_001", "B02001_003"),
year = 2021,
state = "SC",
output = "wide") %>%
clean_names() %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
select(geoid, name, total_pop, black_pop, pct_black)
View(black_pop_sc_2021)
View(black_pop_usa_2021)
# Storing the Black population as a value
pct_black_sc <- black_pop_sc_2021$pct_black
# Add to hometowns dataframe
hometowns_sc_complete <- hometowns_sc_complete %>%
mutate(black_pop_vs_state = if_else(
pct_black > pct_black_sc, "above", "below or equal"))
View(hometowns_sc_complete)
# Summary
race_analysis_sc <- hometowns_sc_complete %>%
group_by(black_pop_vs_state) %>%
summarize(
total_towns = n(),
sum_total_pop = sum(total_pop),
sum_total_players = sum(total_players)
) %>%
mutate(pct_players = round((sum_total_players / sum(sum_total_players)) * 100, 1)) %>%
mutate(players_per_hundred_thousand = round((sum_total_players*1000000)/sum_total_pop,1))
View(race_analysis_sc)
View(race_analysis_al)
View(race_analysis_ga)
View(race_analysis_la)
View(race_analysis_ms)
View(race_analysis_sc)
# DEEP SOUTH SUMMARY
race_analysis_deep_south <- bind_rows(race_analysis_al, race_analysis_ga, race_analysis_la, race_analysis_ms, race_analysis_sc)
View(race_analysis_deep_south)
race_analysis_deep_south <- bind_rows(race_analysis_al, race_analysis_ga, race_analysis_la, race_analysis_ms, race_analysis_sc) %>%
group_by(black_pop_vs_state) %>%
summarize(
towns = sum(total_towns),
total_pop = sum(sum_total_pop),
total_players = sum(sum_total_players)
)
# DEEP SOUTH SUMMARY
race_analysis_deep_south <- bind_rows(race_analysis_al, race_analysis_ga, race_analysis_la, race_analysis_ms, race_analysis_sc) %>%
group_by(black_pop_vs_state) %>%
summarize(
towns = sum(total_towns),
total_pop = sum(sum_total_pop),
total_players = sum(sum_total_players)
) %>%
mutate(pct_players = round((total_players / sum(total_players)) * 100, 1)) %>%
mutate(players_per_hundred_thousand = round((total_players*1000000)/total_pop,1))
View(race_analysis_ms)
View(race_analysis_az)
# TEXAS HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_tx <- football_rosters_usa %>%
filter(hometown_state_clean == "TX")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_tx <- football_rosters_tx %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_tx_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TX",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_tx_2021 <- census_data_tx_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_tx_2021 <- census_data_tx_2021 %>%
mutate(state = case_when(
state == 'Texas' ~ "TX")) %>%
filter(city != "Mesquite" | total_pop != 181) #Removing the second Mesquite, TX that is a CDP
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_tx_complete <- distinct_hometowns_tx %>%
left_join(census_data_tx_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_tx_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Cypress, TX (77429), New Caney, TX (77357), and Wall, TX (76957), the zip codes seems to be good substitutes: https://censusreporter.org/profiles/86000US77429-77429/ https://censusreporter.org/profiles/86000US77357-77357/ https://censusreporter.org/profiles/86000US76957-76957/
census_data_zips_tx_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 77429" | name == "ZCTA5 77357" | name == "ZCTA5 76957") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TX") %>%
mutate(city = case_when(
city == "ZCTA5 77429" ~ "Cypress",
city == "ZCTA5 77357" ~ "New Caney",
city == "ZCTA5 76957" ~ "Wall")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Brock, TX, and Klein, TX, used the school districts because all players went to the same high school: https://censusreporter.org/profiles/97000US4811460-brock-independent-school-district-tx/ https://censusreporter.org/profiles/97000US4825740-klein-independent-school-district-tx/
census_data_sd_tx_2021 <- get_acs(geography = "school district (unified)",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TX",
output = "wide") %>%
clean_names() %>%
filter(name == "Brock Independent School District, Texas" | name == "Klein Independent School District, Texas") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TX") %>%
mutate(city = case_when(
city == "Brock Independent School District, Texas" ~ "Brock",
city == "Klein Independent School District, Texas" ~ "Klein")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_tx_2021 <- bind_rows(census_data_tx_2021, census_data_zips_tx_2021, census_data_sd_tx_2021)
hometowns_tx_complete <- distinct_hometowns_tx %>%
left_join(census_data_tx_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_tx_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_tx_complete, file = "hometowns_tx.csv")
View(black_pop_usa_2021)
# Figuring out Black population in the state
black_pop_tx_2021 <- get_acs(geography = "state",
variables = c("B01003_001", "B02001_003"),
year = 2021,
state = "TX",
output = "wide") %>%
clean_names() %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
select(geoid, name, total_pop, black_pop, pct_black)
View(black_pop_tx_2021)
# Storing the Black population as a value
pct_black_tx <- black_pop_tx_2021$pct_black
# Add to hometowns dataframe
hometowns_tx_complete <- hometowns_tx_complete %>%
mutate(black_pop_vs_state = if_else(
pct_black > pct_black_tx, "above", "below or equal"))
View(hometowns_tx_complete)
# Summary
race_analysis_tx <- hometowns_tx_complete %>%
group_by(black_pop_vs_state) %>%
summarize(
total_towns = n(),
sum_total_pop = sum(total_pop),
sum_total_players = sum(total_players)
) %>%
mutate(pct_players = round((sum_total_players / sum(sum_total_players)) * 100, 1)) %>%
mutate(players_per_hundred_thousand = round((sum_total_players*1000000)/sum_total_pop,1))
View(race_analysis_tx)
# FLORIDA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_fl <- football_rosters_usa %>%
filter(hometown_state_clean == "FL")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_fl <- football_rosters_fl %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_fl_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "FL",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_fl_2021 <- census_data_fl_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_fl_2021 <- census_data_fl_2021 %>%
mutate(state = case_when(
state == 'Florida' ~ "FL")) %>%
filter(city != "Plantation" | total_pop != 4565) #Removing the second Plantation, FL that is a CDP
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_fl_complete <- distinct_hometowns_fl %>%
left_join(census_data_fl_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_fl_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Lithia, FL, the zip code (33547) seems to be a good substitute: https://censusreporter.org/profiles/86000US33547-33547/
census_data_lithia_fl_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 33547") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "FL") %>%
mutate(city = case_when(
city == "ZCTA5 33547" ~ "Lithia")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Ponte Vedra Beach, FL, the zip code (32082) seems to be a good substitute: https://censusreporter.org/profiles/86000US32082-32082/
census_data_ponte_fl_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 32082") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "FL") %>%
mutate(city = case_when(
city == "ZCTA5 32082" ~ "Ponte Vedra Beach")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Santa Rosa Beach, FL, the zip code (32459) seems to be a good substitute: https://censusreporter.org/profiles/86000US32459-32459/
census_data_santa_fl_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 32459") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "FL") %>%
mutate(city = case_when(
city == "ZCTA5 32459" ~ "Santa Rosa Beach")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For St. Johns, FL, the zip code of the high school (32259) seems to be a good substitute: https://censusreporter.org/profiles/86000US32259-32259/
census_data_stjohns_fl_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 32259") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "FL") %>%
mutate(city = case_when(
city == "ZCTA5 32259" ~ "St. Johns")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_fl_2021 <- bind_rows(census_data_fl_2021, census_data_lithia_fl_2021, census_data_ponte_fl_2021, census_data_santa_fl_2021, census_data_stjohns_fl_2021)
hometowns_fl_complete <- distinct_hometowns_fl %>%
left_join(census_data_fl_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_fl_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_fl_complete, file = "hometowns_fl.csv")
# Figuring out Black population in the state
black_pop_fl_2021 <- get_acs(geography = "state",
variables = c("B01003_001", "B02001_003"),
year = 2021,
state = "FL",
output = "wide") %>%
clean_names() %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
select(geoid, name, total_pop, black_pop, pct_black)
# Storing the Black population as a value
pct_black_fl <- black_pop_fl_2021$pct_black
# Add to hometowns dataframe
hometowns_fl_complete <- hometowns_fl_complete %>%
mutate(black_pop_vs_state = if_else(
pct_black > pct_black_fl, "above", "below or equal"))
View(hometowns_fl_complete)
# Summary
race_analysis_fl <- hometowns_fl_complete %>%
group_by(black_pop_vs_state) %>%
summarize(
total_towns = n(),
sum_total_pop = sum(total_pop),
sum_total_players = sum(total_players)
) %>%
mutate(pct_players = round((sum_total_players / sum(sum_total_players)) * 100, 1)) %>%
mutate(players_per_hundred_thousand = round((sum_total_players*1000000)/sum_total_pop,1))
View(race_analysis_fl)
# DEEP SOUTH SUMMARY
race_analysis_deep_south <- bind_rows(race_analysis_al, race_analysis_ga, race_analysis_fl, race_analysis_la, race_analysis_ms, race_analysis_sc, race_analysis_tx) %>%
group_by(black_pop_vs_state) %>%
summarize(
towns = sum(total_towns),
total_pop = sum(sum_total_pop),
total_players = sum(sum_total_players)
) %>%
mutate(pct_players = round((total_players / sum(total_players)) * 100, 1)) %>%
mutate(players_per_hundred_thousand = round((total_players*1000000)/total_pop,1))
View(race_analysis_deep_south)
black_pop_usa_2021 <- get_acs(geography = "state",
variables = c("B01003_001", "B02001_003"),
year = 2021,
output = "wide") %>%
clean_names() %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(deep_south = if_else(
name == "Louisiana" | name == "Mississippi" | name == "Alabama" | name == "Georgia" | name == "South Carolina" | name == "Texas" | name == "Florida", "yes", "no")) %>%
select(geoid, name, total_pop, black_pop, pct_black, deep_south) %>%
arrange(desc(pct_black))
View(black_pop_usa_2021)
# DEEP SOUTH SUMMARY
race_analysis_deep_south <- bind_rows(race_analysis_al, race_analysis_ga, race_analysis_fl, race_analysis_la, race_analysis_ms, race_analysis_sc, race_analysis_tx) %>%
group_by(black_pop_vs_state) %>%
summarize(
towns = sum(total_towns),
total_pop = sum(sum_total_pop),
total_players = sum(sum_total_players)
) %>%
mutate(pct_players = round((total_players / sum(total_players)) * 100, 1)) %>%
mutate(players_per_hundred_thousand = round((total_players*1000000)/total_pop,1))
View(race_analysis_deep_south)
