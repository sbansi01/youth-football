rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "ZCTA5 30273" ~ "Rex")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Subligna, GA, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US130550101002-bg-2-tract-101-chattooga-ga/
census_data_subligna_ga_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "GA",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 2, Census Tract 101, Chattooga County, Georgia") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "GA") %>%
mutate(city = case_when(
city == "Block Group 2, Census Tract 101, Chattooga County, Georgia" ~ "Subligna")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ga_2021 <- bind_rows(census_data_ga_2021, census_data_ellenwood_ga_2021, census_data_rabun_ga_2021, census_data_rex_ga_2021, census_data_subligna_ga_2021)
hometowns_ga_complete <- distinct_hometowns_ga %>%
left_join(census_data_ga_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ga_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ga_complete, file = "hometowns_ga.csv")
# HAWAII HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_hi <- football_rosters_usa %>%
filter(hometown_state_clean == "HI")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_hi <- football_rosters_hi %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_hi_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "HI",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_hi_2021 <- census_data_hi_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_hi_2021 <- census_data_hi_2021 %>%
mutate(state = case_when(
state == 'Hawaii' ~ "HI")) %>%
mutate(city = case_when(
city == 'Urban Honolulu' ~ "Honolulu",
city == 'Kailua (Honolulu County)' ~ "Kailua",
city == 'Kapaa' ~ "Kapa'a",
city == "Mililani Town" ~ "Mililani",
TRUE ~ city))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_hi_complete <- distinct_hometowns_hi %>%
left_join(census_data_hi_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_hi_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Hawaii, we fixed all the NA values by adjusting the way the census referred to the town (see Step 5) or by adjusting the player's hometown name in OpenRefine (for example, players whose hometowns were listed as Maui)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
# N/A for Hawaii
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_hi_complete, file = "hometowns_hi.csv")
# IOWA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ia <- football_rosters_usa %>%
filter(hometown_state_clean == "IA")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ia <- football_rosters_ia %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ia_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "IA",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_ia_2021 <- census_data_ia_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ia_2021 <- census_data_ia_2021 %>%
mutate(state = case_when(
state == 'Iowa' ~ "IA"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_ia_complete <- distinct_hometowns_ia %>%
left_join(census_data_ia_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_ia_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# Pleasant Valley, IA is a county subdivision: https://censusreporter.org/profiles/06000US1916393420-pleasant-valley-township-scott-county-ia/
census_data_pleasant_ia_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "Iowa",
county = "Scott County",
output = "wide") %>%
clean_names() %>%
filter(name == "Pleasant Valley township, Scott County, Iowa") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "IA") %>%
mutate(city = case_when(
city == "Pleasant Valley township, Scott County, Iowa" ~ "Pleasant Valley")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ia_2021 <- bind_rows(census_data_ia_2021, census_data_pleasant_ia_2021)
hometowns_ia_complete <- distinct_hometowns_ia %>%
left_join(census_data_ia_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ia_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ia_complete, file = "hometowns_ia.csv")
# LOUISIANA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_la <- football_rosters_usa %>%
filter(hometown_state_clean == "LA")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_la <- football_rosters_la %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_la_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "LA",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_la_2021 <- census_data_la_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_la_2021 <- census_data_la_2021 %>%
mutate(state = case_when(
state == 'Louisiana' ~ "LA"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_la_complete <- distinct_hometowns_la %>%
left_join(census_data_la_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_la_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Geismar, LA (70734), St. Amant, LA (70774), and Vacherie, LA (70090), the zip codes seems to be good substitutes: https://censusreporter.org/profiles/86000US70734-70734/ https://censusreporter.org/profiles/86000US70774-70774/ https://censusreporter.org/profiles/86000US70090-70090/
census_data_zips_la_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 70734" | name == "ZCTA5 70774" | name == "ZCTA5 70090") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "LA") %>%
mutate(city = case_when(
city == "ZCTA5 70734" ~ "Geismar",
city == "ZCTA5 70774" ~ "St. Amant",
city == "ZCTA5 70090" ~ "Vacherie")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_la_2021 <- bind_rows(census_data_la_2021, census_data_zips_la_2021)
hometowns_la_complete <- distinct_hometowns_la %>%
left_join(census_data_la_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_la_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_la_complete, file = "hometowns_la.csv")
# MISSISSIPPI HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ms <- football_rosters_usa %>%
filter(hometown_state_clean == "MS")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ms <- football_rosters_ms %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ms_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "MS",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_ms_2021 <- census_data_ms_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ms_2021 <- census_data_ms_2021 %>%
mutate(state = case_when(
state == 'Mississippi' ~ "MS"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_ms_complete <- distinct_hometowns_ms %>%
left_join(census_data_ms_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_ms_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Nesbit, MS, the zip code (38651) seems to be a good substitute: https://censusreporter.org/profiles/86000US38651-38651/
census_data_nesbit_ms_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 38651") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "MS") %>%
mutate(city = case_when(
city == "ZCTA5 38651" ~ "Nesbit")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Friendship, MS data obtained using population of nearby Collins, MS, where the player went to HS https://censusreporter.org/profiles/16000US2815140-collins-ms/
census_data_friendship_ms_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "MS",
output = "wide") %>%
clean_names() %>%
filter(name == "Collins city, Mississippi") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "MS") %>%
mutate(city = case_when(
city == "Collins city, Mississippi" ~ "Friendship")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_ms_2021 <- bind_rows(census_data_ms_2021, census_data_nesbit_ms_2021, census_data_friendship_ms_2021)
hometowns_ms_complete <- distinct_hometowns_ms %>%
left_join(census_data_ms_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ms_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ms_complete, file = "hometowns_ms.csv")
# NEBRASKA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ne <- football_rosters_usa %>%
filter(hometown_state_clean == "NE")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ne <- football_rosters_ne %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ne_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "NE",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_ne_2021 <- census_data_ne_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ne_2021 <- census_data_ne_2021 %>%
mutate(state = case_when(
state == 'Nebraska' ~ "NE"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_ne_complete <- distinct_hometowns_ne %>%
left_join(census_data_ne_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_ne_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# Not applicable because no NA values for Nebraska
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
# Not applicable because no NA values for Nebraska
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ne_complete, file = "hometowns_ne.csv")
# SOUTH CAROLINA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_sc <- football_rosters_usa %>%
filter(hometown_state_clean == "SC")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_sc <- football_rosters_sc %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_sc_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "SC",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_sc_2021 <- census_data_sc_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_sc_2021 <- census_data_sc_2021 %>%
mutate(state = case_when(
state == 'South Carolina' ~ "SC"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_sc_complete <- distinct_hometowns_sc %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_sc_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Craytonville, SC, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US450070115013-bg-3-tract-11501-anderson-sc/
census_data_craytonville_sc_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "SC",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 3, Census Tract 115.01, Anderson County, South Carolina") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "SC") %>%
mutate(city = case_when(
city == "Block Group 3, Census Tract 115.01, Anderson County, South Carolina" ~ "Craytonville")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_sc_2021 <- bind_rows(census_data_sc_2021, census_data_craytonville_sc_2021)
hometowns_sc_complete <- distinct_hometowns_sc %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_sc_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_sc_complete, file = "hometowns_sc.csv")
# TEXAS HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_tx <- football_rosters_usa %>%
filter(hometown_state_clean == "TX")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_tx <- football_rosters_tx %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_tx_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TX",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_tx_2021 <- census_data_tx_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_tx_2021 <- census_data_tx_2021 %>%
mutate(state = case_when(
state == 'Texas' ~ "TX")) %>%
filter(city != "Mesquite" | total_pop != 181) #Removing the second Mesquite, TX that is a CDP
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_tx_complete <- distinct_hometowns_tx %>%
left_join(census_data_tx_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_tx_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Cypress, TX (77429), New Caney, TX (77357), and Wall, TX (76957), the zip codes seems to be good substitutes: https://censusreporter.org/profiles/86000US77429-77429/ https://censusreporter.org/profiles/86000US77357-77357/ https://censusreporter.org/profiles/86000US76957-76957/
census_data_zips_tx_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 77429" | name == "ZCTA5 77357" | name == "ZCTA5 76957") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TX") %>%
mutate(city = case_when(
city == "ZCTA5 77429" ~ "Cypress",
city == "ZCTA5 77357" ~ "New Caney",
city == "ZCTA5 76957" ~ "Wall")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Brock, TX, and Klein, TX, used the school districts because all players went to the same high school: https://censusreporter.org/profiles/97000US4811460-brock-independent-school-district-tx/ https://censusreporter.org/profiles/97000US4825740-klein-independent-school-district-tx/
census_data_sd_tx_2021 <- get_acs(geography = "school district (unified)",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TX",
output = "wide") %>%
clean_names() %>%
filter(name == "Brock Independent School District, Texas" | name == "Klein Independent School District, Texas") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TX") %>%
mutate(city = case_when(
city == "Brock Independent School District, Texas" ~ "Brock",
city == "Klein Independent School District, Texas" ~ "Klein")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_tx_2021 <- bind_rows(census_data_tx_2021, census_data_zips_tx_2021, census_data_sd_tx_2021)
hometowns_tx_complete <- distinct_hometowns_tx %>%
left_join(census_data_tx_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_tx_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_tx_complete, file = "hometowns_tx.csv")
# UTAH HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ut <- football_rosters_usa %>%
filter(hometown_state_clean == "UT")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ut <- football_rosters_ut %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ut_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "UT",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_ut_2021 <- census_data_ut_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ut_2021 <- census_data_ut_2021 %>%
mutate(state = case_when(
state == 'Utah' ~ "UT")) %>%
mutate(city = case_when(
city == 'Heber' ~ "Heber City",
TRUE ~ city))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_ut_complete <- distinct_hometowns_ut %>%
left_join(census_data_ut_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_ut_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# In this case, there was a discrepancy between our hometown data, which had a city named Heber City, and the census data, which referred to that town as Heber. We fixed it by going back to Step #5 and adding in a case_when statement for Heber.
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
# Not applicable for Utah
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ut_complete, file = "hometowns_ut.csv")
# ALL HOMETOWNS
hometowns_complete <- bind_rows(hometowns_al_complete, hometowns_fl_complete, hometowns_ga_complete, hometowns_hi_complete, hometowns_ia_complete, hometowns_la_complete, hometowns_ms_complete, hometowns_ne_complete, hometowns_sc_complete, hometowns_tx_complete, hometowns_ut_complete) %>%
mutate(hometown_combined = paste(hometown_city_clean, hometown_state_clean, sep = ", ")) %>%
arrange(desc(players_per_thousand)) %>%
select(hometown_city_clean:hometown_state_clean, hometown_combined, total_players:players_per_thousand)
#write_csv(hometowns_complete, file = "hometowns_complete.csv")
# OTHER - use for messing around
distribution <- hometowns_complete %>%
group_by(total_players) %>%
summarise(total = n())
five_plus <- hometowns_complete %>%
filter(total_players >= 5) %>%
arrange(desc(players_per_thousand))
#write_csv(five_plus, file = "five_plus_players.csv")
View(hometowns_complete)
write_csv(hometowns_complete, file = "hometowns_complete.csv")
View(five_plus)
write_csv(five_plus, file = "five_plus_players.csv")
