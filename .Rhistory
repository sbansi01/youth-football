hometowns_nc_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Arden, NC (28704), the zip code seems to be good substitutes: https://censusreporter.org/profiles/86000US28704-28704/
census_data_arden_nc_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 28704") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "NC") %>%
mutate(city = case_when(
city == "ZCTA5 28704" ~ "Arden")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_nc_2021 <- bind_rows(census_data_nc_2021, census_data_arden_nc_2021)
hometowns_nc_complete <- distinct_hometowns_nc %>%
left_join(census_data_nc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_nc_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_nc_complete, file = "hometowns_nc.csv")
# OHIO HOMETOWNS (not the best one to use as a template)
# Step 1: Filter for the state's players
football_rosters_oh <- football_rosters_usa %>%
filter(hometown_state_clean == "OH")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_oh <- football_rosters_oh %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_oh_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "OH",
output = "wide")
# It turns out that many towns in Ohio are county subdivisions, so we will grab some of those we need, too
census_data_oh_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "OH",
output = "wide") %>%
filter(NAME == "Braceville township, Trumbull County, Ohio" | NAME == "Colerain township, Hamilton County, Ohio" | NAME == "Concord township, Lake County, Ohio" | NAME == "Liberty township, Butler County, Ohio" | NAME == "West Chester township, Butler County, Ohio")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_oh_2021 <- census_data_oh_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_oh_subdivisions_2021 <- census_data_oh_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality|township)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_oh_2021 <- bind_rows(census_data_oh_2021, census_data_oh_subdivisions_2021)
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_oh_2021 <- census_data_oh_2021 %>%
mutate(state = case_when(
state == 'Ohio' ~ "OH")) %>%
mutate(city = case_when(
city == "Liberty" ~ "Liberty Township",
TRUE ~ city))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_oh_complete <- distinct_hometowns_oh %>%
left_join(census_data_oh_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_oh_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Lewis Center, OH (43035) and North Jackson, OH (44451), the zip codes seems to be good substitutes: https://censusreporter.org/profiles/86000US43035-43035/ https://censusreporter.org/profiles/86000US44451-44451/
census_data_zips_oh_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 43035" | name == "ZCTA5 44451") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "OH") %>%
mutate(city = case_when(
city == "ZCTA5 43035" ~ "Lewis Center",
city == "ZCTA5 44451" ~ "North Jackson")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_oh_2021 <- bind_rows(census_data_oh_2021, census_data_zips_oh_2021)
hometowns_oh_complete <- distinct_hometowns_oh %>%
left_join(census_data_oh_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_oh_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_oh_complete, file = "hometowns_oh.csv")
# SOUTH CAROLINA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_sc <- football_rosters_usa %>%
filter(hometown_state_clean == "SC")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_sc <- football_rosters_sc %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_sc_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "SC",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_sc_2021 <- census_data_sc_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_sc_2021 <- census_data_sc_2021 %>%
mutate(state = case_when(
state == 'South Carolina' ~ "SC"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_sc_complete <- distinct_hometowns_sc %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_sc_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Craytonville, SC, the block group seems to be a good substitute: https://censusreporter.org/profiles/15000US450070115013-bg-3-tract-11501-anderson-sc/
census_data_craytonville_sc_2021 <- get_acs(geography = "block group",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "SC",
output = "wide") %>%
clean_names() %>%
filter(name == "Block Group 3, Census Tract 115.01, Anderson County, South Carolina") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "SC") %>%
mutate(city = case_when(
city == "Block Group 3, Census Tract 115.01, Anderson County, South Carolina" ~ "Craytonville")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_sc_2021 <- bind_rows(census_data_sc_2021, census_data_craytonville_sc_2021)
hometowns_sc_complete <- distinct_hometowns_sc %>%
left_join(census_data_sc_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_sc_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_sc_complete, file = "hometowns_sc.csv")
# TEXAS HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_tx <- football_rosters_usa %>%
filter(hometown_state_clean == "TX")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_tx <- football_rosters_tx %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_tx_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TX",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_tx_2021 <- census_data_tx_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_tx_2021 <- census_data_tx_2021 %>%
mutate(state = case_when(
state == 'Texas' ~ "TX")) %>%
filter(city != "Mesquite" | total_pop != 181) #Removing the second Mesquite, TX that is a CDP
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_tx_complete <- distinct_hometowns_tx %>%
left_join(census_data_tx_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_tx_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Cypress, TX (77429), New Caney, TX (77357), and Wall, TX (76957), the zip codes seems to be good substitutes: https://censusreporter.org/profiles/86000US77429-77429/ https://censusreporter.org/profiles/86000US77357-77357/ https://censusreporter.org/profiles/86000US76957-76957/
census_data_zips_tx_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 77429" | name == "ZCTA5 77357" | name == "ZCTA5 76957") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TX") %>%
mutate(city = case_when(
city == "ZCTA5 77429" ~ "Cypress",
city == "ZCTA5 77357" ~ "New Caney",
city == "ZCTA5 76957" ~ "Wall")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# For Brock, TX, and Klein, TX, used the school districts because all players went to the same high school: https://censusreporter.org/profiles/97000US4811460-brock-independent-school-district-tx/ https://censusreporter.org/profiles/97000US4825740-klein-independent-school-district-tx/
census_data_sd_tx_2021 <- get_acs(geography = "school district (unified)",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "TX",
output = "wide") %>%
clean_names() %>%
filter(name == "Brock Independent School District, Texas" | name == "Klein Independent School District, Texas") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "TX") %>%
mutate(city = case_when(
city == "Brock Independent School District, Texas" ~ "Brock",
city == "Klein Independent School District, Texas" ~ "Klein")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_tx_2021 <- bind_rows(census_data_tx_2021, census_data_zips_tx_2021, census_data_sd_tx_2021)
hometowns_tx_complete <- distinct_hometowns_tx %>%
left_join(census_data_tx_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_tx_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_tx_complete, file = "hometowns_tx.csv")
# UTAH HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_ut <- football_rosters_usa %>%
filter(hometown_state_clean == "UT")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ut <- football_rosters_ut %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ut_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "UT",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_ut_2021 <- census_data_ut_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_ut_2021 <- census_data_ut_2021 %>%
mutate(state = case_when(
state == 'Utah' ~ "UT")) %>%
mutate(city = case_when(
city == 'Heber' ~ "Heber City",
TRUE ~ city))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_ut_complete <- distinct_hometowns_ut %>%
left_join(census_data_ut_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_ut_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# In this case, there was a discrepancy between our hometown data, which had a city named Heber City, and the census data, which referred to that town as Heber. We fixed it by going back to Step #5 and adding in a case_when statement for Heber.
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
# Not applicable for Utah
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_ut_complete, file = "hometowns_ut.csv")
# VIRGINIA HOMETOWNS
# Step 1: Filter for the state's players
football_rosters_va <- football_rosters_usa %>%
filter(hometown_state_clean == "VA")
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_va <- football_rosters_va %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_va_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "VA",
output = "wide")
# Step 4: General cleaning of census data to prepare for join with hometowns/roster data. This part is the same for every state and (except for the dataframe name) can more or less be copied and pasted.
census_data_va_2021 <- census_data_va_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
# Step 5: State-specific cleaning of census data to prepare for join with hometowns/roster data. This part is different for every state. The first mutate function should be included for every state, just modified depending on the state name. Additional mutate functions may be needed for instances when the census names something in a weird way that doesn't line up with the hometowns.
census_data_va_2021 <- census_data_va_2021 %>%
mutate(state = case_when(
state == 'Virginia' ~ "VA"))
# Step 6: Join the census data to the list of hometowns. Also create a column that tells us how many people are elite college football players for every 1,000 residents.
hometowns_va_complete <- distinct_hometowns_va %>%
left_join(census_data_va_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Step 7: Notice there are a few NA values. This happens when the census data does not join with the hometowns data, perhaps because the hometown is misspelled or because there is no census data for that town. First, let's find the NA values.
hometowns_va_complete %>%
filter(is.na(geoid))
# Step 8: Now we have to figure out how to address each of the NA values. This is a judgment call, and we should be careful about documenting how and why we made that decision. If there is an NA value because a hometown is misspelled, tell Sapna, and she will make that correction in Open Refine. If there is an NA value because the census does not recognize the hometown, we need to find some substitute for that hometown.
# For Aylett, VA (23009), Bristow, VA (20136), Hayes, VA (23072), Oak Hill, VA (22030), and Chesterfield, VA (23832) the zip codes seems to be good substitutes: https://censusreporter.org/profiles/86000US23009-23009/ https://censusreporter.org/profiles/86000US20136-20136/ https://censusreporter.org/profiles/86000US23072-23072/ https://censusreporter.org/profiles/86000US22030-22030/ https://censusreporter.org/profiles/86000US23832-23832/
census_data_zips_va_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 23009" | name == "ZCTA5 20136" | name == "ZCTA5 23072" | name == "ZCTA5 22030" | name == "ZCTA5 23832") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "VA") %>%
mutate(city = case_when(
city == "ZCTA5 23009" ~ "Aylett",
city == "ZCTA5 20136" ~ "Bristow",
city == "ZCTA5 23072" ~ "Hayes",
city == "ZCTA5 22030" ~ "Oak Hill",
city == "ZCTA5 23832" ~ "Chesterfield")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Browns Store, VA is a county subdivision: https://censusreporter.org/profiles/06000US1916393420-pleasant-valley-township-scott-county-ia/
census_data_browns_va_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "Virginia",
county = "Lunenburg County",
output = "wide") %>%
clean_names() %>%
filter(name == "Browns Store district, Lunenburg County, Virginia") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "VA") %>%
mutate(city = case_when(
city == "Browns Store district, Lunenburg County, Virginia" ~ "Browns Store")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# Step 9: We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_va_2021 <- bind_rows(census_data_va_2021, census_data_zips_va_2021, census_data_browns_va_2021)
hometowns_va_complete <- distinct_hometowns_va %>%
left_join(census_data_va_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_va_complete %>%
filter(is.na(geoid)) #If this is not producing an empty dataframe, go back and continue to work on NA values
# Step 10: If needed, uncomment out to create a CSV
#write_csv(hometowns_va_complete, file = "hometowns_va.csv")
# SMALLER STATE HOMETOWNS - used for all states with less than 50 Power Five players (WY, AK, RI, ND, NH, MT, NM, SD, DE, ID, DC, WV, CT, NV); *do not use this as a template*
# Vector of all states with fewer than 50 players
states_under_50 <- football_rosters_usa_states$hometown_state_clean[football_rosters_usa_states$total_players < 50]
# Filter for the states' players
football_rosters_small_states <- football_rosters_usa %>%
filter(hometown_state_clean %in% states_under_50)
# Get a list of all the unique hometowns in the state
distinct_hometowns_small_states <- football_rosters_small_states %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
# Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_small_states_2021 <- lapply(states_under_50, function(state) {
get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = state,
output = "wide")
})
census_data_small_states_2021 <- do.call(rbind, census_data_small_states_2021)
# It turns out that many towns in Connecticut, New Hampshire, and Rhode Island are county subdivisions, so we will grab the relevant ones of those, too
census_data_small_states_subdivisions_2021 <- get_acs(geography = "county subdivision",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = c("CT", "NH", "RI"),
output = "wide") %>%
filter(NAME == "Darien town, Fairfield County, Connecticut" | NAME == "East Greenwich town, Kent County, Rhode Island" | NAME == "Fairfield town, Fairfield County, Connecticut" | NAME == "Glastonbury town, Hartford County, Connecticut" | NAME == "Grantham town, Sullivan County, New Hampshire" | NAME == "Hollis town, Hillsborough County, New Hampshire" | NAME == "Kent town, Litchfield County, Connecticut" | NAME == "New Fairfield town, Fairfield County, Connecticut" | NAME == "Pomfret town, Windham County, Connecticut" | NAME == "Rocky Hill town, Hartford County, Connecticut" | NAME == "Suffield town, Hartford County, Connecticut" | NAME == "Trumbull town, Fairfield County, Connecticut" | NAME == "Wallingford town, New Haven County, Connecticut" | NAME == "West Warwick town, Kent County, Rhode Island" | NAME == "Westport town, Fairfield County, Connecticut" | NAME == "Wilton town, Fairfield County, Connecticut" | NAME == "Windsor town, Hartford County, Connecticut")
# General cleaning of census data to prepare for join with hometowns/roster data.
census_data_small_states_2021 <- census_data_small_states_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_small_states_subdivisions_2021 <- census_data_small_states_subdivisions_2021 %>%
clean_names() %>%
separate(name, into = c("city", "county", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village|municipality)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
census_data_small_states_2021 <- bind_rows(census_data_small_states_2021, census_data_small_states_subdivisions_2021)
# Cleaning of census data to prepare for join with hometowns/roster data.
state_crosswalk_modified <- state_crosswalk %>%
mutate(state_names = str_to_title(state_name_caps)) %>%
mutate(state_names = case_when(
state_names == 'Washington, Dc' ~ "District of Columbia",
TRUE ~ state_names)) %>%
select(state_abb, state_names)
census_data_small_states_2021 <- census_data_small_states_2021 %>%
left_join(state_crosswalk_modified, by = c("state" = "state_names")) %>%
mutate(state = census_data_small_states_2021$state_abb) %>%
mutate(city = case_when(
city == 'Boise City' ~ "Boise",
TRUE ~ city))
census_data_small_states_2021 <- census_data_small_states_2021 %>%
rename(state = state_abb)
# Join the census data to the list of hometowns.
hometowns_small_states_complete <- distinct_hometowns_small_states %>%
left_join(census_data_small_states_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# Now we have to figure out how to address each of the NA values.
# For Ona, WV, the zip code (25545) seems to be a good substitute: https://censusreporter.org/profiles/86000US25545-25545/
census_data_ona_wv_2021 <- get_acs(geography = "zcta",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
output = "wide") %>%
clean_names() %>%
filter(name == "ZCTA5 25545") %>%
rename(city = name, total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1)) %>%
mutate(state = "WV") %>%
mutate(city = case_when(
city == "ZCTA5 25545" ~ "Ona")) %>%
select(geoid, city, state, total_pop, black_pop, median_income, pct_black)
# We now have to append these special cases to our state census data, redo the join, and run one more check for NA values.
census_data_small_states_2021 <- bind_rows(census_data_small_states_2021, census_data_ona_wv_2021)
hometowns_small_states_complete <- distinct_hometowns_small_states %>%
left_join(census_data_small_states_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
# If needed, uncomment out to create a CSV
#write_csv(hometowns_small_states_complete, file = "hometowns_small_states.csv")
# ALL HOMETOWNS
hometowns_complete <- bind_rows(hometowns_al_complete, hometowns_az_complete, hometowns_fl_complete, hometowns_ga_complete, hometowns_hi_complete, hometowns_in_complete, hometowns_ia_complete, hometowns_ky_complete, hometowns_la_complete, hometowns_md_complete, hometowns_mi_complete, hometowns_ms_complete, hometowns_mo_complete, hometowns_nc_complete, hometowns_ne_complete, hometowns_nj_complete, hometowns_oh_complete, hometowns_sc_complete, hometowns_tx_complete, hometowns_ut_complete, hometowns_va_complete, hometowns_small_states_complete) %>%
mutate(hometown_combined = paste(hometown_city_clean, hometown_state_clean, sep = ", ")) %>%
arrange(desc(players_per_thousand)) %>%
select(hometown_city_clean:hometown_state_clean, hometown_combined, total_players:players_per_thousand)
#write_csv(hometowns_complete, file = "hometowns_complete.csv")
# OTHER - use for messing around
distribution <- hometowns_complete %>%
group_by(total_players) %>%
summarise(total = n())
five_plus <- hometowns_complete %>%
filter(total_players >= 5) %>%
arrange(desc(players_per_thousand))
#write_csv(five_plus, file = "five_plus_players.csv")
# Step 1: Filter for the state's players
football_rosters_al <- football_rosters_usa %>%
filter(hometown_state_clean == "AR")
# Step 1: Filter for the state's players
football_rosters_al <- football_rosters_usa %>%
filter(hometown_state_clean == "AL")
# Step 1: Filter for the state's players
football_rosters_ar <- football_rosters_usa %>%
filter(hometown_state_clean == "AR")
View(football_rosters_al)
# Step 2: Get a list of all the unique hometowns in the state
distinct_hometowns_ar <- football_rosters_ar %>%
group_by(hometown_city_clean, hometown_state_clean) %>%
summarise(total_players = n())
View(distinct_hometowns_ar)
# Step 3: Grab the relevant census data for that state. Note: B01003 = total population, B02001 = total Black population, B19013 = median household income. We get these codes using the ACS crosswalk we loaded earlier (ACS_2001) and this website: https://censusreporter.org/topics/table-codes/
census_data_ar_2021 <- get_acs(geography = "place",
variables = c("B01003_001", "B02001_003", "B19013_001"),
year = 2021,
state = "AR",
output = "wide")
View(census_data_ar_2021)
census_data_ar_2021 <- census_data_ar_2021 %>%
clean_names() %>%
separate(name, into = c("city", "state"), sep = ", ", remove = FALSE) %>%
mutate(city = gsub("\\b(town|city|CDP|village)\\b", "", city)) %>%
mutate(city = str_squish(city)) %>%
select(geoid, city, state, b01003_001e, b02001_003e, b19013_001e) %>%
rename(total_pop = b01003_001e, black_pop = b02001_003e, median_income = b19013_001e) %>%
mutate(pct_black = round(black_pop/total_pop*100, 1))
View(census_data_ar_2021)
census_data_al_2021 <- census_data_al_2021 %>%
mutate(state = case_when(
state == 'Arkansas' ~ "AR"))
census_data_al_2021 <- census_data_al_2021 %>%
mutate(state = case_when(
state == 'Alabama' ~ "AL"))
census_data_ar_2021 <- census_data_ar_2021 %>%
mutate(state = case_when(
state == 'Arkansas' ~ "AR"))
hometowns_ar_complete <- distinct_hometowns_ar %>%
left_join(census_data_ar_2021, by = c("hometown_city_clean" = "city", "hometown_state_clean" = "state")) %>%
mutate(players_per_thousand = round((total_players*1000)/total_pop,1)) %>%
arrange(desc(players_per_thousand))
hometowns_ar_complete %>%
filter(is.na(geoid))
View(hometowns_ar_complete)
View(hometowns_ar_complete)
